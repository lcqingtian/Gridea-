<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-12T12:53:21.384Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World 测试</title>
    <link href="http://example.com/2024/03/12/hello-world/"/>
    <id>http://example.com/2024/03/12/hello-world/</id>
    <published>2024-03-12T12:53:21.384Z</published>
    <updated>2024-03-12T12:53:21.384Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>建立自己的博客</title>
    <link href="http://example.com/2024/03/12/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2024/03/12/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/</id>
    <published>2024-03-11T16:00:00.000Z</published>
    <updated>2024-03-12T12:53:21.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h2 id="1-安装-Node-js-和-npm"><a href="#1-安装-Node-js-和-npm" class="headerlink" title="1. 安装 Node.js 和 npm"></a>1. 安装 Node.js 和 npm</h2><ul><li>前往 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装最新版本的 Node.js。</li><li>安装完成后，你可以在命令行中运行以下命令来验证是否成功安装：<br>node -v<br>npm -v</li></ul><p>Copy code</p><h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><ul><li>如果你的系统中还没有安装 Git，你可以在 <a href="https://git-scm.com/">Git 官网</a> 下载并安装。</li><li>安装完成后，你可以在命令行中运行以下命令来验证是否成功安装：<br>git –version</li></ul><h2 id="3-全局安装-Hexo"><a href="#3-全局安装-Hexo" class="headerlink" title="3. 全局安装 Hexo"></a>3. 全局安装 Hexo</h2><ul><li>打开命令行终端，运行以下命令来全局安装 Hexo-cli：<br>npm install -g hexo-cli</li></ul><p>markdown<br>Copy code</p><h2 id="4-初始化-Hexo-项目"><a href="#4-初始化-Hexo-项目" class="headerlink" title="4. 初始化 Hexo 项目"></a>4. 初始化 Hexo 项目</h2><ul><li>在你想要创建 Hexo 博客的目录中，打开命令行终端，运行以下命令来初始化一个新的 Hexo 项目：<br>hexo init myblog</li></ul><h2 id="5-进入项目目录并安装依赖"><a href="#5-进入项目目录并安装依赖" class="headerlink" title="5. 进入项目目录并安装依赖"></a>5. 进入项目目录并安装依赖</h2><ul><li><p>进入项目目录：<br>cd myblog</p></li><li><p>在项目目录中运行以下命令来安装项目所需的依赖：<br>npm install</p></li></ul><h2 id="6-启动本地服务器"><a href="#6-启动本地服务器" class="headerlink" title="6. 启动本地服务器"></a>6. 启动本地服务器</h2><ul><li>在项目目录中运行以下命令来启动 Hexo 的本地服务器：<br>hexo server</li></ul><p>less</p><ul><li>这将启动一个本地服务器，默认情况下访问地址为 <a href="http://localhost:4000/">http://localhost:4000</a>。</li></ul><p>现在，你已经成功安装和初始化了 Hexo 项目。你可以开始编写文章、定制主题，并通过部署将博客发布到线上。<br>这是一个使用Markdown格式编写的Hexo安装步骤，你可以将其保存为.md文件，然后在Hexo博客中使用。</p><h2 id="部署GitHub-Pages"><a href="#部署GitHub-Pages" class="headerlink" title="部署GitHub Pages"></a>部署GitHub Pages</h2><p>我们假定你已经有一个GitHub账号而且已经配置好git了，不知道应该怎么做的话可以参考这篇博客。</p><p>现在新建一个仓库（Create a new repository），Repository name填写为&lt;你的GitHub用户名&gt;.github.io，例如“ChaoiteC.github.io”，同时仓库可见性必须为Public（对所有人可见）。</p><p>如果操作正确，你会在仓库设置中找到Page选项。</p><p>现在打开博客根目录下的_config.yml，找到Deployment相关配置项，如下填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:&lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>你可能注意到官方文档与一些其他教程中repo项填写的是http链接，这也是可以的，但在使用GitHub Actions部署时可能会遭遇拒绝访问的问题。</p><p>安装hexo-deployer-git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo deploy 或者简写为： $ hexo d<br>或者简写为：<br><br>bash<br>Copy code<br>$ hexo d -g<br></code></pre></td></tr></table></figure><p>deploy命令会将public目录中的文件和目录推送至_config.yml中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</p><p>如果一切工作正常，现在你可以在&lt;你的GitHub用户名&gt;.github.io中看到网站内容。</p><p>##GitHub Actions自动部署（可选）<br>我们很快注意到，一旦你离开现在使用的设备，你就无法修改网站内容。当你更换设备时，你不得不将上述步骤全部重复。一旦设备出现故障更是会损失惨重。这些矛盾呼吁我们采取方法，要求我们能自动地储存与部署博客文件，而不受手上设备的限制。</p><p>GitHub Actions为我们在需要的时候创建一个容器，我们在容器中安装软件并处理我们的博客文件，最后部署到Pages仓库中。现在我们来实现它。</p><p>前提<br>首先在Github上新建一个仓库用来储存我们的博客文件，通常我们将其设为私有的。</p><p>如果你安装了VS Code，这时候你可以在博客根目录右键菜单中选择“在终端中打开”来启动Windows Powershell，然后输入并执行：</p><p>code .<br>此命令将会启动VS Code并在其中打开这个文件夹。然后你可以在侧边栏中打开源代码管理页面，从GitHub添加远程库。只需要按照提示操作，你最终能将整个目录下的文件上传到仓库中（被.gitignore指定的文件&#x2F;文件夹不会上传）。</p><p>我们将上面内容视为准备操作，如果你不知道如何操作，可以寻求搜索引擎的帮助。</p><p>部署密钥<br>现在在“git bash here”中执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -f github-deploy-key<br></code></pre></td></tr></table></figure><p>这个命令将生成部署密钥，你只需要一直按空格，根目录下就会出现两个文件：github-deploy-key和github-deploy-key.pub。</p><p>注意</p><p>正如其名字，除非你确定自己在做什么，否则你不应该将密钥直接上传到仓库（尤其是公共仓库）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">在博客源文件仓库中依序打开Settings-&gt;Secrets and variables-&gt;Actions-&gt;New repository secret。<br></code></pre></td></tr></table></figure><p>在Name中填写“HEXO_DEPLOY_PRI”，在Value中填写github-deploy-key文件中的全部内容（包括头尾的文字）。然后Add secret。</p><p>在Page仓库中依序打开Settings-&gt;Deploy keys-&gt;Add deploy key。</p><p>在Title中填写“HEXO_DEPLOY_PUB”，在Key中填写github-deploy-key.pub文件中的全部内容，勾选Allow write access，然后Add key。</p><p>配置GitHub Actions<br>在博客根目录下创建.github&#x2F;workflows&#x2F;deploy.yml文件，目录结构如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>└── .github<br>    └── workflows<br>        └── deploy.yml<br>在deploy.yml文件中粘贴下面内容并在对应地方作改动。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Action&#x27;s Name</span><br>name: AutoDeploy<br><br>on:<br>  <span class="hljs-comment"># Triggering Condition 1 Main Branch Performs The Task After Receiving Push</span><br>  push:<br>    branches:<br>      - main<br>  <span class="hljs-comment"># Triggering Condition 2 Manual Button</span><br>  workflow_dispatch:<br><br><span class="hljs-comment"># Putting Environment Variables Here You Need To Replace It With Your Own</span><br><span class="hljs-built_in">env</span>:<br>  <span class="hljs-comment"># After Hexo Compiles Use This Git User To Deploy To The Github Warehouse</span><br>  GIT_USER: &lt;你的GitHub用户名&gt;<br>  <span class="hljs-comment"># After Hexo Compiles Use This Git Mailbox To Deploy To The Github Warehouse</span><br>  GIT_EMAIL: &lt;你的GitHub用户邮箱&gt;<br>  <span class="hljs-comment"># The Git Hub Warehouse To Be Deployed After Hexo Compiles</span><br>  GIT_DEPLOY_REPO: &lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io<br>  <span class="hljs-comment"># Hexo Compiles The Branch To Deploy After Compilation</span><br>  GIT_DEPLOY_BRANCH: main<br><br><span class="hljs-built_in">jobs</span>:<br>  build:<br>    name: Build on node <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125; and <span class="hljs-variable">$&#123;&#123; matrix.os &#125;</span>&#125;<br>    runs-on: ubuntu-latest<br>    <span class="hljs-keyword">if</span>: github.event.repository.owner.id == github.event.sender.id<br>    strategy:<br>      matrix:<br>        os: [ubuntu-latest]<br>        node_version: [16.x]<br><br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v4<br><br>      - name: Checkout deploy repo<br>        uses: actions/checkout@v4<br>        with:<br>          repository: <span class="hljs-variable">$&#123;&#123; env.GIT_DEPLOY_REPO &#125;</span>&#125;<br>          ref: <span class="hljs-variable">$&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;</span>&#125;<br>          path: .deploy_git<br><br>      - name: Use Node.js <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125;<br>        uses: actions/setup-node@v1<br>        with:<br>          node-version: <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125;<br><br>      - name: Configuration environment<br>        <span class="hljs-built_in">env</span>:<br>          HEXO_DEPLOY_PRI: <span class="hljs-variable">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;</span>&#125;<br>        run: |<br>          sudo timedatectl set-timezone <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>          <span class="hljs-built_in">mkdir</span> -p ~/.ssh/<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HEXO_DEPLOY_PRI</span>&quot;</span> &gt; ~/.ssh/id_rsa<br>          <span class="hljs-built_in">chmod</span> 600 ~/.ssh/id_rsa<br>          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts<br>          git config --global user.name <span class="hljs-variable">$GIT_USER</span><br>          git config --global user.email <span class="hljs-variable">$GIT_EMAIL</span><br><br>      - name: Install dependencies<br>        run: |<br>          npm install hexo-cli -g<br>          <span class="hljs-comment"># Install According To The Components You Installed</span><br>          npm install - gulp gulp-uglify hexo hexo-deployer-git hexo-generator-archive hexo-generator-category hexo-generator-feed hexo-generator-index hexo-generator-search hexo-generator-searchdb hexo-generator-sitemap hexo-generator-tag hexo-renderer-ejs hexo-renderer-marked hexo-renderer-pug hexo-renderer-stylus hexo-server hexo-tag-cloud hexo-word-counter readable-stream uglify-es --save<br><br>      - name: Deploy hexo<br>        run: |<br>          npm run deploy<br></code></pre></td></tr></table></figure><p>现在你可以尝试在博客源文件仓库中作一点改动并推送到远程库，接着在仓库的Actions页面中观察工作是否正常（不被打红叉）。如果正常，大约在1-2分钟内会完成自动部署任务，你能在Pages上确认到更改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h1&gt;&lt;h2 id=&quot;1-安装-Node-js-和-npm&quot;&gt;&lt;a href=&quot;#1-安装-Node-js-和-</summary>
      
    
    
    
    <category term="建站" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
  </entry>
  
  <entry>
    <title>软考数据库</title>
    <link href="http://example.com/2024/03/12/ruankao/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2024/03/12/ruankao/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-03-11T16:00:00.000Z</published>
    <updated>2024-03-12T12:53:21.384Z</updated>
    
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    
  </entry>
  
</feed>
