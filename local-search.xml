<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/22/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%84/"/>
    <url>/2024/03/22/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<p>AWS亚马逊云账号注册 全球云服务器12个月免费试用详细教程</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/22/Redis/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AF%B9%E6%AF%94/"/>
    <url>/2024/03/22/Redis/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="RedisTemplate、Jedis、Lettuce、Redisson对比"><a href="#RedisTemplate、Jedis、Lettuce、Redisson对比" class="headerlink" title="RedisTemplate、Jedis、Lettuce、Redisson对比"></a>RedisTemplate、Jedis、Lettuce、Redisson对比</h1><p>以下是对以上Redis客户端库的对比分析。</p><h2 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h2><p>来源于Spring Data Redis, 它是Spring提供的一套对Redis进行操作的模板类。它的最大优点在于提供了对Key、String、List、Set、ZSet、Hash的操作抽象，其次是解决了在操作过程中的事务、批处理及Pipeline等问题，此外提供了对Redis Pub&#x2F;Sub模型的抽象。但是需要注意的是，它需要Spring环境的支撑存在。</p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持。Jedis用法简便，支持排序、连接池、管道等操作。另外，使用Jedis开发者需要提前了解redis所有命令和参数，才能开发出一个完善的系统，因此上手难度会比较大。</p><h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><p>Lettuce为Redis提供了 Scala，RxJava，和响应式编程模型以及命令式使用方法も提供している。Lettuce基于Netty框架。连接实例（StatefulRedisConnection）可以在多个线程间并发访问，应为StatefulRedisConnection是线程安全的。Lettuce的性能比Jedis更优，API更丰富一些。</p><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p>Redisson 是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用类，且这些分布式对象都是由Redis支持的，因此你可以把Redisson当成一个分布式的工具类库 。对于Redis的常规操作，你可以把Redisson当成Jedis的一个封装，对于复杂操作，你可以把Redisson当成一个功能丰富的客户端。</p><h2 id="使用便利度"><a href="#使用便利度" class="headerlink" title="使用便利度"></a>使用便利度</h2><ul><li><strong>RedisTemplate</strong>：其主要优点在于对Key、String、List、Set、ZSet、Hash等类型数据进行操作时，提供了一套抽象，使得我们可以更简单方便地进行操作。不足在于需要Spring环境支持。</li><li><strong>Jedis</strong>：Jedis的API提供了全面的Redis命令支持。不足在于上手难度大，因为使用Jedis需要开发者提前了解Redis所有命令和参数。</li><li><strong>Lettuce</strong>：提供了响应式编程模型，基于Netty框架，且是线程安全的。对于高并发的应用，无需像Jedis那样创建大量连接对象，减轻系统负担。缺点是需要对响应式编程有一定理解才能更好地使用。</li><li><strong>Redisson</strong>：提供了丰富的分布式对象和服务，可以当做分布式工具类库使用。且Redisson对于Redis的常规操作也提供了封装，使得操作更为便捷。</li></ul><h2 id="集成难易程度"><a href="#集成难易程度" class="headerlink" title="集成难易程度"></a>集成难易程度</h2><ul><li><strong>RedisTemplate</strong>：由于与Spring框架集成，如果是在Spring环境下开发，集成十分便捷。如果不是在Spring环境下，则需要额外配置才能使用。</li><li><strong>Jedis</strong>：Jedis的集成十分简单，但是可能需要编写额外的代码来支持连接池等特性。</li><li><strong>Lettuce</strong>：与Spring集成简单，Spring Boot也提供了自动配置。</li><li><strong>Redisson</strong>：Redisson与Spring集成较为方便，但使用其中的分布式对象或服务时可能需要更多配置。</li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><strong>RedisTemplate</strong>：性能受限于其内部使用的连接库，可能选择Jedis或者Lettuce。</li><li><strong>Jedis</strong>：Jedis在高并发的场景中性能可能会有 一些问题，原因是Jedis不是线程安全的，需要使用连接池管理Jedis连接。在大并发量下，Jedis连接因此可能会成为瓶颈。</li><li><strong>Lettuce</strong>：Lettuce基于Netty，其连接实例（StatefulRedisConnection）可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的。相比于Jedis，Lettuce的性能在高并发情况下更优。</li><li><strong>Redisson</strong>：性能强大，优于Jedis和Lettuce。Redisson提供了更多的功能和更高的性能，内部实现上，Redisson采用了Netty框架进行网络通信，同时内部采用了许多并发处理，使得其在并发处理方面具有了很高的效率。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在选择具体的Redis Java客户端时，需要综合考虑应用的具体需求、开发团队的技术栈、性能需求等。</p><ul><li>如果你的项目是基于Spring的，那么RedisTemplate可能是最方便的选择。</li><li>如果你的项目特别关注性能，并且并发量高，Lettuce或者Redisson会是更好的选择。</li><li>如果你需要更便捷地使用Redis提供的分布式工具类库，Redisson是一个不错的选择。</li></ul><p>最后还需要通过自己的实际使用和测试，以确定哪个客户端最适合自己的项目需求。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1、探索 Python：一门兼具力量与易用性的编程语言</title>
    <link href="/2024/03/21/python/01_python%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/03/21/python/01_python%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>探索 Python：一门兼具力量与易用性的编程语言</strong></p><p>Python是一门多用途的高级编程语言，它以其简洁明了的语法和强大的功能而受到广泛推崇。在本篇博客中，我们将探索Python的定义、应用领域、选择原因以及与其他编程语言的比较。</p><h3 id="1-什么是-Python？"><a href="#1-什么是-Python？" class="headerlink" title="1. 什么是 Python？"></a>1. 什么是 Python？</h3><p>Python是一门高级编程语言，由Guido van Rossum于上世纪90年代创建。Python以其清晰简洁的语法和易学易用的特点而闻名，被称为“最具可读性的编程语言之一”。Python的哲学是“优雅、明了、简单”，这使得Python成为初学者入门编程的绝佳选择。</p><h3 id="2-Python-能做什么？"><a href="#2-Python-能做什么？" class="headerlink" title="2. Python 能做什么？"></a>2. Python 能做什么？</h3><p>Python在各个领域有着广泛的应用。从Web开发、数据科学到人工智能、机器学习，Python都具备强大的工具和库。谷歌、Facebook、Dropbox等知名公司都在使用Python来构建他们的软件。此外，Python还适用于自动化脚本、网络编程、游戏开发等多个领域。</p><h3 id="3-为什么选择-Python？"><a href="#3-为什么选择-Python？" class="headerlink" title="3. 为什么选择 Python？"></a>3. 为什么选择 Python？</h3><p>选择Python的理由有很多。首先，Python的简洁明了的语法使得代码可读性高，易于维护。其次，Python具有庞大的开源社区和丰富的资源库，让开发人员能够快速构建应用。此外，Python跨平台性强， 可以在不同操作系统上运行。综合来看，Python是一个功能丰富、易学易用的编程语言，适合不同层次的开发人员使用。</p><h3 id="4-很高兴知道-Python"><a href="#4-很高兴知道-Python" class="headerlink" title="4. 很高兴知道 Python"></a>4. 很高兴知道 Python</h3><p>Python的语法与其他编程语言相比，有着一些明显的差异。与C&#x2F;C++相比，Python的语法更简洁，变量类型更灵活，内存管理由解释器自动处理。与Java相比，Python更灵活，不需要显示声明变量类型，异常处理更简单，线程管理更方便。与JavaScript相比，Python更强调函数式编程，模块导入更直观，异步编程更简单。</p><p>在实践中，Python的代码通常比其他语言更容易理解和维护，这使得Python成为很多开发者的首选语言之一。</p><p>总的来说，Python以其简洁的语法、强大的功能和广泛的应用领域，吸引了许多开发者的青睐。无论是初学者还是资深开发者，都可以通过Python来实现各种项目。</p><p>通过这篇博客，希望读者能对Python有更加全面的了解，并尝试使用Python来解决各种编程问题和实现创意项目。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、探索 Python：安装与快速入门</title>
    <link href="/2024/03/21/python/02_Python%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/21/python/02_Python%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>当撰写关于 Python 安装和快速入门的博客时，记得详细列出安装步骤和基础概念，让读者能够快速上手。以下是一个示例博客：</p><hr><p><strong>标题：探索 Python：安装与快速入门</strong></p><p>如果你对编程感兴趣，Python是一个优秀的选择。Python以其易读性和功能丰富的特点而广受欢迎。本文将介绍如何安装Python并快速入门。</p><h3 id="第一步：安装-Python"><a href="#第一步：安装-Python" class="headerlink" title="第一步：安装 Python"></a>第一步：安装 Python</h3><ol><li><p><strong>下载 Python</strong>：</p><ul><li>访问 Python 官方网站（<a href="https://www.python.org/downloads/%EF%BC%89%E3%80%82">https://www.python.org/downloads/）。</a></li><li>在下载页面选择适合你操作系统的版本，并下载最新的 Python 安装程序。</li></ul></li><li><p><strong>安装 Python</strong>：</p><ul><li>运行下载的安装程序。</li><li>在安装向导中选择“Add Python x.x to PATH”（将 Python 添加到环境变量）。</li><li>点击“Install Now”开始安装。</li></ul></li><li><p><strong>验证安装</strong>：</p><ul><li>打开命令提示符（Windows）或终端（Mac&#x2F;Linux）。</li><li>输入命令 <code>python --version</code> 检查Python是否成功安装。</li></ul></li></ol><h3 id="第二步：Python-快速入门"><a href="#第二步：Python-快速入门" class="headerlink" title="第二步：Python 快速入门"></a>第二步：Python 快速入门</h3><ol><li><p><strong>交互式模式</strong>：</p><ul><li>打开命令提示符或终端。</li><li>输入 <code>python</code> 进入 Python 交互式模式。</li><li>尝试输入简单的数学运算或字符串操作，如 <code>2+2</code> 或 <code>&#39;Hello, World!&#39;</code>。</li></ul></li><li><p><strong>编写和执行脚本</strong>：</p><ul><li>打开文本编辑器，如 Notepad++、VS Code等。</li><li>编写简单的 Python 脚本，比如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>将脚本保存为 <code>.py</code> 文件，如 <code>hello.py</code>。</li><li>在命令提示符或终端中进入脚本所在</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、Python 注释</title>
    <link href="/2024/03/21/python/03_Python%E6%B3%A8%E9%87%8A/"/>
    <url>/2024/03/21/python/03_Python%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>探索Python注释: 代码注释的重要性与最佳实践</p><p>在编写Python代码时，注释起着至关重要的作用。它不仅可以帮助他人理解代码的逻辑和目的，还可以提高代码的可读性和可维护性。在本文中，我们将深入探讨Python中注释的作用、用法和最佳实践。</p><h3 id="什么是Python注释？"><a href="#什么是Python注释？" class="headerlink" title="什么是Python注释？"></a>什么是Python注释？</h3><p>在Python中，注释是代码中以<code>#</code>符号开头的部分，它们不会被解释器执行。注释通常用于解释代码的意图、提供重要信息以及帮助他人理解代码的功能。在编写注释时，我们需要注意以下几点：</p><ul><li>单行注释：以<code>#</code>符号开头，可以位于代码行的末尾或一行的开头。</li><li>多行注释：通常用三重引号(<code>&quot;&quot;&quot;</code>)或(<code>&#39;&#39;&#39;</code>)包围多行注释内容。</li></ul><h3 id="Python注释的作用和重要性"><a href="#Python注释的作用和重要性" class="headerlink" title="Python注释的作用和重要性"></a>Python注释的作用和重要性</h3><ol><li><strong>提高代码可读性</strong>：通过添加注释，我们可以使代码更易于理解和阅读，尤其对于复杂的逻辑或算法。</li><li><strong>代码调试</strong>：注释可以用于暂时排除一部分代码以进行调试，或标记一些需要调整或修改的部分。</li><li><strong>团队协作</strong>：在团队合作开发中，注释能够促进团队成员之间的沟通，保持代码的连贯性。</li><li><strong>文档生成</strong>：注释对于自动生成文档和使用一些文档生成工具（如Sphinx）来生成代码文档非常有用。</li></ol><h3 id="最佳实践：如何书写Python注释"><a href="#最佳实践：如何书写Python注释" class="headerlink" title="最佳实践：如何书写Python注释"></a>最佳实践：如何书写Python注释</h3><ul><li>解释代码目的和逻辑，而不是废话。</li><li>避免冗长的注释，应清 这篇博客提供了关于Python注释的基本概念、作用和最佳实践。读者可以从中了解到如何正确使用注释来增强代码的可读性和可维护性。希望这篇博客对您有所帮助！如果您需要进一步了解或有任何疑问，请随时联系我。祝您编写出清晰易懂的代码！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、掌握Python语法的关键要点</title>
    <link href="/2024/03/21/python/04_Python%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/03/21/python/04_Python%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在这里给您编写一些关于Python语法的教程，展示了Python中一些基本概念和代码示例。接下来我将展示一个心得综述，同时也会加入一些关于Python语法以及执行Python语法的综述。</p><p><strong>心得教程：掌握Python语法的关键要点</strong></p><p>掌握Python语法是学习这门强大编程语言的第一步。从本篇博客中，我们学习了Python的基本语法规则、代码执行方法以及一些重要概念。以下是我对此的总结：</p><h3 id="Python语法关键要点"><a href="#Python语法关键要点" class="headerlink" title="Python语法关键要点"></a>Python语法关键要点</h3><ol><li><p><strong>Python 缩进</strong>：</p><ul><li>Python 使用缩进代替大括号来表示代码块的开始和结束。</li><li>缩进的空格数量不固定，但必须保持一致，常见的是四个空格。</li></ul></li><li><p><strong>Python变量</strong>：</p><ul><li>在Python中，变量的声明非常简单，只需要直接给变量赋值即可。</li><li>Python是一种动态类型语言，变量的类型由赋值的数据类型决定。</li></ul></li><li><p><strong>Python 注释</strong>：</p><ul><li>使用 <code>#</code> 符号可以在代码中添加注释，用于解释代码的功能或说明。</li><li>注释可以帮助他人或将来的自己理解和维护代码。</li></ul></li></ol><h3 id="执行Python语法"><a href="#执行Python语法" class="headerlink" title="执行Python语法"></a>执行Python语法</h3><p>在命令行中执行Python语法可以立即查看结果，且十分方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>Hello, World!<br></code></pre></td></tr></table></figure><p>在服务器上创建一个Python文件，使用<code>.py</code>文件扩展名，然后在命令行中运行它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\Your Name&gt;python myfile.py<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过学习Python基本语法，我们可以让代码更加直观和易读。掌握Python的缩进、变量和注释规则</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、深入了解Python变量：定义、赋值、全局变量和多重赋值</title>
    <link href="/2024/03/21/python/05_Python%E5%8F%98%E9%87%8F/"/>
    <url>/2024/03/21/python/05_Python%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>深入了解Python变量：定义、赋值、全局变量和多重赋值</p><p>在Python编程中，变量是一种重要的概念，用于存储和操作数据。本教程将继续介绍Python中变量的更多内容，包括多重赋值和全局变量的概念。</p><h3 id="变量的定义和赋值"><a href="#变量的定义和赋值" class="headerlink" title="变量的定义和赋值"></a>变量的定义和赋值</h3><p>在Python中，可以使用等号（<code>=</code>）将值赋给变量。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">5</span>          <span class="hljs-comment"># 将整数值5赋给变量x</span><br>name = <span class="hljs-string">&quot;Alice&quot;</span> <span class="hljs-comment"># 将字符串&quot;Alice&quot;赋给变量name</span><br></code></pre></td></tr></table></figure><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><p>Python允许同时为多个变量赋值，即多重赋值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>   <span class="hljs-comment"># 同时给x, y, z赋值</span><br>a = b = c = <span class="hljs-number">0</span>       <span class="hljs-comment"># 将0赋给a, b, c</span><br></code></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在Python中，全局变量指的是在程序任何地方均可使用的变量。如果在函数内部想要修改全局变量的值，需要使用<code>global</code>关键字声明全局变量。示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">global_var = <span class="hljs-string">&quot;I am a global variable&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_global_var</span>():<br>    <span class="hljs-keyword">global</span> global_var<br>    global_var = <span class="hljs-string">&quot;Modified global variable inside function&quot;</span><br><br>modify_global_var()<br><span class="hljs-built_in">print</span>(global_var)  <span class="hljs-comment"># 输出&quot;Modified global variable inside function&quot;</span><br></code></pre></td></tr></table></figure><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ul><li>变量名区分大小写，如<code>myVar</code>和<code>MyVar</code>是不同的变量。</li><li>变量名应该具有描述性，清晰表达变量用途。</li><li>遵循命名规则，如驼峰命名法（camelCase）或下划线分隔法（snake_case）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、Python指定变量类型</title>
    <link href="/2024/03/21/python/06_Python%E6%8C%87%E5%AE%9A%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/03/21/python/06_Python%E6%8C%87%E5%AE%9A%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在 Python 中，通常情况下不需要显式指定变量的类型，因为 Python 是一种动态类型语言，变量的类型会根据赋给它们的值自动推断。然而，有时候我们希望限定变量的类型，可以使用类型标注来指定变量的类型。类型标注不会影响程序的运行，但可以提高代码的可读性和可维护性。</p><p>以下是一些示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定变量x为整数类型</span><br>x: <span class="hljs-built_in">int</span> = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 指定变量y为浮点数类型</span><br>y: <span class="hljs-built_in">float</span> = <span class="hljs-number">3.14</span><br><br><span class="hljs-comment"># 指定变量name为字符串类型</span><br>name: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Alice&quot;</span><br><br><span class="hljs-comment"># 指定变量is_student为布尔类型</span><br>is_student: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在 Python 3.6 版本及以后，引入了类型提示的功能，通过类型标注可以告诉代码阅读者变量的预期类型。同时，一些静态类型检查工具如<code>mypy</code>也可以基于这些类型标注进行类型检查，有助于发现潜在的类型相关错误。类型标注可以在函数参数、返回值、类属性和变量等地方进行使用，提升代码的可靠性和可维护性。</p><p>总的来说，虽然 Python 是一种动态类型语言，但引入类型标注有助于提高代码的清晰度和可读性，特别是在大型项目中或需要与其他开发者合作时。要注意的是，类型标注只是提示，Python 仍然会根据赋给变量的值进行动态类型推断。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、Python指定变量类型</title>
    <link href="/2024/03/21/python/07_Python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/03/21/python/07_Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>在 Python 中，字符串是由单引号或双引号引起来的，您可以使用 print() 函数来显示字符串文字。字符串也可以分配给变量，使用三个引号可以创建多行字符串。以下是关于字符串的更多细节：</p><h3 id="字符串的创建和显示"><a href="#字符串的创建和显示" class="headerlink" title="字符串的创建和显示"></a>字符串的创建和显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br><br>a = <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment"># 多行字符串</span><br>a = <span class="hljs-string">&quot;&quot;&quot;Lorem ipsum dolor sit amet,</span><br><span class="hljs-string">consectetur adipiscing elit,</span><br><span class="hljs-string">sed do eiusmod tempor incididunt</span><br><span class="hljs-string">ut labore et dolore magna aliqua.&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h3 id="字符串的索引和循环遍历"><a href="#字符串的索引和循环遍历" class="headerlink" title="字符串的索引和循环遍历"></a>字符串的索引和循环遍历</h3><p>字符串在 Python 中被视为 unicode 字符的字节数组，可以通过索引访问字符串的元素。同时，您可以使用循环遍历字符串中的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 获取位置 1 的字符</span><br><br><span class="hljs-comment"># 循环遍历字符串</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;banana&quot;</span>:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h3 id="字符串长度和检查操作"><a href="#字符串长度和检查操作" class="headerlink" title="字符串长度和检查操作"></a>字符串长度和检查操作</h3><p>使用 <code>len()</code> 函数可以获取字符串的长度。通过关键字 <code>in</code> 可以检查字符串中是否存在某个短语或字符，而使用 <code>not in</code> 则可以检查是否不存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))  <span class="hljs-comment"># 获取字符串长度</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt)  <span class="hljs-comment"># 检查是否存在某个短语</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;free&#x27; is present.&quot;</span>)<br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt)  <span class="hljs-comment"># 检查是否不存在某个短语</span><br></code></pre></td></tr></table></figure><p>掌握字符串的创建、索引、循环遍历以及长度检查等操作，将有助于您更好地处理字符串数据。了解字符串相关的操作可以让您更有效地编写Python程序。<br>在 Python 中，您可以通过索引操作和切片操作来访问字符串的特定部分。虽然字符串本身在 Python 中是不可变的，但您可以使用索引和切片创建新的字符串，并对其进行操作。下面是一些示例：</p><h3 id="使用索引访问单个字符"><a href="#使用索引访问单个字符" class="headerlink" title="使用索引访问单个字符"></a>使用索引访问单个字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text[<span class="hljs-number">0</span>])  <span class="hljs-comment"># H</span><br><span class="hljs-built_in">print</span>(text[<span class="hljs-number">7</span>])  <span class="hljs-comment"># W</span><br></code></pre></td></tr></table></figure><h3 id="使用切片操作获取子字符串"><a href="#使用切片操作获取子字符串" class="headerlink" title="使用切片操作获取子字符串"></a>使用切片操作获取子字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>])  <span class="hljs-comment"># Hello</span><br><span class="hljs-built_in">print</span>(text[<span class="hljs-number">7</span>:])   <span class="hljs-comment"># World!</span><br></code></pre></td></tr></table></figure><h3 id="遍历字符串中的字符"><a href="#遍历字符串中的字符" class="headerlink" title="遍历字符串中的字符"></a>遍历字符串中的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br>    <span class="hljs-built_in">print</span>(char)<br></code></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text1 = <span class="hljs-string">&quot;Hello&quot;</span><br>text2 = <span class="hljs-string">&quot;World&quot;</span><br>combined_text = text1 + <span class="hljs-string">&quot; &quot;</span> + text2<br><span class="hljs-built_in">print</span>(combined_text)  <span class="hljs-comment"># Hello World</span><br></code></pre></td></tr></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br>new_text = text.replace(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Hi&quot;</span>)<br><span class="hljs-built_in">print</span>(new_text)  <span class="hljs-comment"># Hi, World!</span><br></code></pre></td></tr></table></figure><h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.upper())  <span class="hljs-comment"># HELLO, WORLD!</span><br><span class="hljs-built_in">print</span>(text.lower())  <span class="hljs-comment"># hello, world!</span><br></code></pre></td></tr></table></figure><h3 id="检查字符串是否以特定子字符串开始或结束"><a href="#检查字符串是否以特定子字符串开始或结束" class="headerlink" title="检查字符串是否以特定子字符串开始或结束"></a>检查字符串是否以特定子字符串开始或结束</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.startswith(<span class="hljs-string">&quot;Hello&quot;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(text.endswith(<span class="hljs-string">&quot;World!&quot;</span>))    <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>在 Python 中，您可以使用字符串的格式化操作来创建具有特定格式的字符串。有几种方法可以进行字符串的格式化：</p><h3 id="使用-操作符进行格式化"><a href="#使用-操作符进行格式化" class="headerlink" title="使用 % 操作符进行格式化"></a>使用 % 操作符进行格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Alice&quot;</span><br>age = <span class="hljs-number">30</span><br>formatted_string = <span class="hljs-string">&quot;My name is %s and I am %d years old.&quot;</span> % (name, age)<br><span class="hljs-built_in">print</span>(formatted_string)<br></code></pre></td></tr></table></figure><h3 id="使用-format-方法进行格式化"><a href="#使用-format-方法进行格式化" class="headerlink" title="使用 format() 方法进行格式化"></a>使用 format() 方法进行格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Bob&quot;</span><br>age = <span class="hljs-number">25</span><br>formatted_string = <span class="hljs-string">&quot;My name is &#123;&#125; and I am &#123;&#125; years old.&quot;</span>.<span class="hljs-built_in">format</span>(name, age)<br><span class="hljs-built_in">print</span>(formatted_string)<br></code></pre></td></tr></table></figure><h3 id="使用-f-string-进行格式化（Python-3-6-）"><a href="#使用-f-string-进行格式化（Python-3-6-）" class="headerlink" title="使用 f-string 进行格式化（Python 3.6+）"></a>使用 f-string 进行格式化（Python 3.6+）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Charlie&quot;</span><br>age = <span class="hljs-number">35</span><br>formatted_string = <span class="hljs-string">f&quot;My name is <span class="hljs-subst">&#123;name&#125;</span> and I am <span class="hljs-subst">&#123;age&#125;</span> years old.&quot;</span><br><span class="hljs-built_in">print</span>(formatted_string)<br></code></pre></td></tr></table></figure><p>在以上示例中，<code>%</code> 操作符、<code>format()</code> 方法和 f-string 都是用来格式化字符串的常用方法。您可以根据自己的喜好和需求选择其中一种方式来格式化字符串。<br>在 Python 中，转义字符是以反斜杠（<code>\</code>）开头的特殊字符序列，用于表示在字符串中无法直接表示的字符或特殊含义。以下是一些常用的转义字符及其含义：</p><ol><li><code>\n</code>：换行符</li><li><code>\t</code>：制表符（Tab）</li><li><code>\\</code>：反斜杠自身</li><li><code>\&#39;</code>：单引号</li><li><code>\&quot;</code>：双引号</li></ol><p>下面是一些示例，演示如何在 Python 中使用转义字符：</p><h3 id="换行符-n"><a href="#换行符-n" class="headerlink" title="换行符 \n"></a>换行符 <code>\n</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello\nWorld&quot;</span>)<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># Hello</span><br><span class="hljs-comment"># World</span><br></code></pre></td></tr></table></figure><h3 id="制表符-t"><a href="#制表符-t" class="headerlink" title="制表符 \t"></a>制表符 <code>\t</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name:\tAlice&quot;</span>)<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># Name:    Alice</span><br></code></pre></td></tr></table></figure><h3 id="反斜杠自身"><a href="#反斜杠自身" class="headerlink" title="反斜杠自身 \\"></a>反斜杠自身 <code>\\</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C:\\Users\\Alice\\Desktop&quot;</span>)<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># C:\Users\Alice\Desktop</span><br></code></pre></td></tr></table></figure><h3 id="单引号-和双引号"><a href="#单引号-和双引号" class="headerlink" title="单引号 \&#39; 和双引号 \&quot;"></a>单引号 <code>\&#39;</code> 和双引号 <code>\&quot;</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;He\&#x27;s a musician.&#x27;</span>)<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># He&#x27;s a musician.</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;She said, \&quot;Hello!\&quot;&quot;</span>)<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># She said, &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>使用转义字符可以在字符串中正确表示特殊字符，避免出现语法错误或歧义。在处理路径、换行、引号等情况时，转义字符就显得非常有用。当您需要在字符串中表示一些特殊字符时，可以考虑使用转义字符来进行处理。</p><p>在 Python 中，有一组可用于处理字符串的内置方法。这些方法可以对字符串进行各种操作，如大小写转换、查找、替换、修剪、分割等。以下是一些常用的字符串方法及其描述：</p><ul><li><code>capitalize()</code>: 将字符串的首字母转换为大写</li><li><code>casefold()</code>: 将字符串全部转换为小写</li><li><code>center()</code>: 返回一个居中对齐的字符串</li><li><code>count()</code>: 返回指定值在字符串中出现的次数</li><li><code>encode()</code>: 返回字符串的编码版本</li><li><code>endswith()</code>: 判断字符串是否以指定值结尾</li><li><code>expandtabs()</code>: 设置字符串中制表符的大小</li><li><code>find()</code>: 在字符串中搜索指定值并返回其位置</li><li><code>format()</code>: 格式化字符串中的指定值</li><li><code>index()</code>: 在字符串中搜索指定值并返回其位置</li><li><code>isalnum()</code>: 判断字符串是否由字母和数字组成</li><li><code>isalpha()</code>: 判断字符串是否全部由字母组成</li><li><code>isdigit()</code>: 判断字符串是否全部由数字组成</li><li><code>join()</code>: 将可迭代对象的元素连接到字符串中</li><li><code>lower()</code>: 将字符串转换为小写</li><li><code>replace()</code>: 替换字符串中的指定值</li><li><code>split()</code>: 根据指定分隔符拆分字符串并返回列表</li><li><code>strip()</code>: 去除字符串两侧的空格和换行符</li><li><code>upper()</code>: 将字符串转换为大写</li></ul><p>这些方法能够帮助您处理和操作字符串数据，在实际编程中非常有用。使用不同的字符串方法可以根据需求对字符串进行各种操作和处理。如果您有特定的需求，可以查阅 Python 文档以了解更多字符串方法的细节和使用方法。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、Python 数字表示</title>
    <link href="/2024/03/21/python/08_Python%E6%95%B0%E5%AD%97/"/>
    <url>/2024/03/21/python/08_Python%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>在 Python 中，数字类型是一种基本的数据类型，包括整数（int）、浮点数（float）和复数（complex）。当您为数字类型变量赋值时，便会创建相应的数值对象。以下是对数字类型及其操作的简要概述：</p><h3 id="整数（int）"><a href="#整数（int）" class="headerlink" title="整数（int）"></a>整数（int）</h3><p>整数是不带小数部分的正数或负数，长度没有限制。可以使用内置函数<code>type()</code>来验证整数类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">35656222554887711</span><br>z = -<span class="hljs-number">3255522</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="浮点数（float）"><a href="#浮点数（float）" class="headerlink" title="浮点数（float）"></a>浮点数（float）</h3><p>浮点数带有一位或多位小数，可以是正数或负数。也可以使用科学计数法表示浮点数。同样可以使用<code>type()</code>来验证浮点数类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1.10</span><br>y = <span class="hljs-number">1.0</span><br>z = -<span class="hljs-number">35.59</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))  <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))  <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))  <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="复数（complex）"><a href="#复数（complex）" class="headerlink" title="复数（complex）"></a>复数（complex）</h3><p>复数用<code>j</code>表示虚部，例如<code>3+5j</code>。同样可以使用<code>type()</code>来验证复数类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">3</span>+<span class="hljs-number">5j</span><br>y = <span class="hljs-number">5j</span><br>z = -<span class="hljs-number">5j</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))  <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))  <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))  <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>您可以使用内置函数<code>int()</code>、<code>float()</code>和<code>complex()</code>对各种数值类型进行转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span>    <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">2.8</span>  <span class="hljs-comment"># float</span><br>z = <span class="hljs-number">1j</span>   <span class="hljs-comment"># complex</span><br><br>a = <span class="hljs-built_in">float</span>(x)   <span class="hljs-comment"># int 转换为 float</span><br>b = <span class="hljs-built_in">int</span>(y)     <span class="hljs-comment"># float 转换为 int</span><br>c = <span class="hljs-built_in">complex</span>(x) <span class="hljs-comment"># int 转换为 complex</span><br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1.0</span><br>```python<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))  <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>Python 的内置模块 <code>random</code> 可用于生成随机数。您可以使用 <code>randrange()</code> 函数来生成指定范围内的随机整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 生成 1 到 9 之间的随机整数</span><br></code></pre></td></tr></table></figure><p>以上是关于 Python 中数字类型的概览及操作，包括整数、浮点数、复数以及类型转换和生成随机数的说明。深入理解和灵活运用这些数据类型将有助于编写更加高效和功能丰富的Python程序。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9、Python 数据类型</title>
    <link href="/2024/03/21/python/09_Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/03/21/python/09_Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>##Python内置数据类型概览及应用</p><p>在Python编程中，数据类型是不可或缺的概念。了解Python内置的数据类型及其特性，对于编写高效和可靠的代码至关重要。本文将介绍Python中常见的内置数据类型及其应用场景。</p><h3 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h3><ol><li><strong>str（字符串）</strong>：用于表示文本数据，可以使用单引号或双引号定义字符串。<ul><li>示例：<code>name = &#39;Alice&#39;</code> 或 <code>message = &quot;Hello, world&quot;</code></li></ul></li></ol><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ol start="2"><li><strong>int（整数）</strong>：用于表示整数值，没有小数部分。</li><li><strong>float（浮点数）</strong>：用于表示带有小数点的数值。</li><li><strong>complex（复数）</strong>：用于表示复数，形如<code>x + yj</code>。</li></ol><h3 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h3><ol start="5"><li><strong>list（列表）</strong>：有序、可变的集合，元素之间用逗号分隔，可包含不同类型数据。</li><li><strong>tuple（元组）</strong>：有序、不可变的集合，通过圆括号定义，适合用于不会改变的数据集合。</li><li><strong>range（范围）</strong>：用于生成一系列数字，常用于循环中的迭代操作。</li></ol><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><ol start="8"><li><strong>dict（字典）</strong>：无序的键值对集合，可通过键来访问值，提供快速查找能力。</li></ol><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ol start="9"><li><strong>set（集合）</strong>：无序、不重复的元素集合，可以进行交、并、差等集合运算。</li><li><strong>frozenset（冻结集合）</strong>：与集合类似，但元素不可改变。</li></ol><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ol start="11"><li><strong>bool（布尔值）</strong>：表示真（True）或假（False）的逻辑值，常用于条件判断和逻辑运算。</li></ol><h3 id="二进制类型Python-是一个编程语言，采用的是动态类型，我们不需要明确地声明变量的类型。当我们赋一个值给一个变量的同时，这个变量的类型也自动确定。因此，在-Python-中我们不需要关心数据类型问题，Python-会为我们自动处理这些底层细节。Python-中有以下几种数据类型："><a href="#二进制类型Python-是一个编程语言，采用的是动态类型，我们不需要明确地声明变量的类型。当我们赋一个值给一个变量的同时，这个变量的类型也自动确定。因此，在-Python-中我们不需要关心数据类型问题，Python-会为我们自动处理这些底层细节。Python-中有以下几种数据类型：" class="headerlink" title="二进制类型Python 是一个编程语言，采用的是动态类型，我们不需要明确地声明变量的类型。当我们赋一个值给一个变量的同时，这个变量的类型也自动确定。因此，在 Python 中我们不需要关心数据类型问题，Python 会为我们自动处理这些底层细节。Python 中有以下几种数据类型："></a>二进制类型Python 是一个编程语言，采用的是动态类型，我们不需要明确地声明变量的类型。当我们赋一个值给一个变量的同时，这个变量的类型也自动确定。因此，在 Python 中我们不需要关心数据类型问题，Python 会为我们自动处理这些底层细节。Python 中有以下几种数据类型：</h3><p>整型 int：如 1, 20, -35<br>浮点型 float：如 3.14, -7.0<br>复数 complex：如 1 + 2j<br>字符串 str：如 ‘hello’, “world”<br>布尔型 bool：如 True, False<br>列表 list：如 [1, 2, 3], [‘a’, ‘b’, ‘c’]<br>元组 tuple：如 (1, 2, 3), (‘x’, ‘y’, ‘z’)<br>集合 set：如 {1, 2, 3}, {‘apple’, ‘banana’, ‘cherry’}<br>字典 dict：如 {‘name’: ‘Alice’, ‘age’: 30}<br>这些是 Python 中常用的数据类型，每种类型都有自己的特点和用途。了解不同数据类型的特点和如何使用它们是编程中的基本技能。Python 能够处理多种不同的数据类型，灵活使用这些数据类型可以让我们更方便地编写各种复杂的程序。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、Python 布尔</title>
    <link href="/2024/03/21/python/10_Python%E5%B8%83%E5%B0%94/"/>
    <url>/2024/03/21/python/10_Python%E5%B8%83%E5%B0%94/</url>
    
    <content type="html"><![CDATA[<p>布尔值代表两个值之一：True 或 False。</p><p>在编程中，您经常需要知道表达式是否为 True 还是 False。</p><p>您可以计算 Python 中的任何表达式，并得到 True 或 False 两种答案之一。</p><p>当您比较两个值时，将计算表达式并返回布尔答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子：比较两个值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> == <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &lt; <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><p>在 if 语句中运行条件时，Python 会返回 True 或 False：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子：在 if 语句中使用条件</span><br>a = <span class="hljs-number">200</span><br>b = <span class="hljs-number">33</span><br><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b is greater than a&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b is not greater than a&quot;</span>)<br></code></pre></td></tr></table></figure><p>评估值和变量<br><code>bool()</code> 函数允许您评估任何值，并给您 True 或 False 作为结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子：评估值和变量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Hello&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">15</span>))<br><br>x = <span class="hljs-string">&quot;Hello&quot;</span><br>y = <span class="hljs-number">15</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(y))<br></code></pre></td></tr></table></figure><p>大多数值都是 True<br>在 Python 中，大多数值都会被评估为 True，只有少数情况会被评估为 False，例如空字符串、0 等：</p><ul><li>非空字符串、非零数字、非空列表、元组、集合和字典都会被评估为 True。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子：大多数值都是 True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;abc&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">123</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>]))<br></code></pre></td></tr></table></figure><p>有些值是 False<br>除了非空值外，其他情况会被评估为 False，例如 False、None、0、空字符串、空列表、空字典等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例子：一些值是 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(()))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(&#123;&#125;))<br></code></pre></td></tr></table></figure><p>函数可以返回布尔值<br>您可以创建返回布尔值</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、Python 运算符</title>
    <link href="/2024/03/21/python/11_Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/03/21/python/11_Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>在 Python 编程中，运算符是用来执行操作的符号。了解和熟练运用各种运算符是写出高效和功能丰富代码的重要一步。在本篇博客中，我们将深入探讨 Python 中的各种运算符，包括算术运算符、赋值运算符、比较运算符、逻辑运算符、身份运算符、成员运算符和按位运算符。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>Python 中的算术运算符用于执行基本的数学运算。常见的算术运算符包括：</p><ul><li><code>+</code>：加法运算符</li><li><code>-</code>：减法运算符</li><li><code>*</code>：乘法运算符</li><li><code>/</code>：除法运算符</li><li><code>//</code>：整除运算符</li><li><code>%</code>：取模运算符</li><li><code>**</code>：幂运算符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3</span><br><br><span class="hljs-built_in">print</span>(a + b)  <span class="hljs-comment"># 13</span><br><span class="hljs-built_in">print</span>(a - b)  <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(a * b)  <span class="hljs-comment"># 30</span><br><span class="hljs-built_in">print</span>(a / b)  <span class="hljs-comment"># 3.3333</span><br><span class="hljs-built_in">print</span>(a // b) <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(a % b)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a ** b) <span class="hljs-comment"># 1000</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符用于给变量赋值。常见的赋值运算符包括：</p><ul><li><code>=</code>：将值赋给变量</li><li><code>+=</code>：累加并赋值</li><li><code>-=</code>：递减并赋值</li><li><code>*=</code>：乘以并赋值</li><li><code>/=</code>：除以并赋值</li><li><code>//=</code>：整除并赋值</li><li><code>%=</code>：取模 等待用户提问中…… - <code>%=</code>：取模并赋值</li><li><code>**=</code>：幂运算并赋值</li><li><code>&amp;=</code>：按位与并赋值</li><li><code>|=</code>：按位或并赋值</li><li><code>^=</code>：按位异或并赋值</li><li><code>&lt;&lt;=</code>：左移并赋值</li><li><code>&gt;&gt;=</code>：右移并赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3</span><br><br>a += b  <span class="hljs-comment"># 相当于 a = a + b</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 13</span><br><br>a **= b  <span class="hljs-comment"># 相当于 a = a ** b</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 2197</span><br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用于比较两个值。常见的比较运算符包括：</p><ul><li><code>==</code>：等于</li><li><code>!=</code>：不等于</li><li><code>&gt;</code>：大于</li><li><code>&lt;</code>：小于</li><li><code>&gt;=</code>：大于等于</li><li><code>&lt;=</code>：小于等于</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br>y = <span class="hljs-number">5</span><br><br><span class="hljs-built_in">print</span>(x == y)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(x != y)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(x &gt; y)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(x &lt; y)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(x &gt;= y)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(x &lt;= y)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于组合条件。常见的逻辑运算符包括：</p><ul><li><code>and</code>：逻辑与</li><li><code>or</code>：逻辑或</li><li><code>not</code>：逻辑非</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-literal">True</span><br>b = <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> a)    <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>在下面的链接中继续阅读全文的其余部分：<a href="#">Python 运算符 - 继续阅读全文</a></p><p>在这篇博客中，我们探讨了 Python 中的算术运算符、赋值运算符、比较运算符、逻辑运算符等。掌握这些运算符可以让 您可以在博客平台上发布这篇文章，以帮助其他Python学习者更好地理解和应用不同类型的运算符。希望这篇文章对您的读者有所帮助！如果您需要关于Python或其他主题的进一步帮助和建议，请随时告诉我。祝您写作顺利！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、深入了解 Python 列表：定义、操作和常见用法</title>
    <link href="/2024/03/21/python/12_Python%E5%88%97%E8%A1%A8/"/>
    <url>/2024/03/21/python/12_Python%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>在 Python 编程中，列表是一种非常常见且强大的数据结构，用于存储一组有序的元素。列表在 Python 中被广泛使用，因为它们灵活、易于操作，并且可以包含不同类型的数据。在本篇博客中，我们将深入介绍 Python 列表的定义、操作和常见用法，帮助您更好地利用列表提高编程效率。</p><h2 id="什么是-Python-列表？"><a href="#什么是-Python-列表？" class="headerlink" title="什么是 Python 列表？"></a>什么是 Python 列表？</h2><p>在 Python 中，列表是一种有序、可变的数据结构，可以包含任意类型的数据。列表使用方括号 <code>[]</code> 来定义，并且元素之间用逗号 <code>,</code> 分隔。以下是一个简单的 Python 列表示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>]<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>fruits</code> 是一个包含四种水果的列表。列表中的每个元素都有一个索引，索引从 0 开始。您可以通过索引访问列表中的元素，还可以对列表进行各种操作。</p><h2 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h2><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><p>您可以通过索引访问列表中的元素。列表的索引从 0 开始，可以使用正整数索引和负整数索引（从末尾开始）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fruits[<span class="hljs-number">0</span>])    <span class="hljs-comment"># 输出：apple</span><br><span class="hljs-built_in">print</span>(fruits[-<span class="hljs-number">1</span>])   <span class="hljs-comment"># 输出：orange</span><br></code></pre></td></tr></table></figure><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><p>您可以使用切片操作获取列表的子集。切片操作使用两个索引，并使用冒号 <code>:</code> 分隔起始索引和结束索引（不包含结束索引）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fruits[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])    <span class="hljs-comment"># 输出：[&#x27;banana&#x27;, &#x27;cherry&#x27;]</span><br><span class="hljs-built_in">print</span>(fruits[:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;]</span><br><span class="hljs-built_in">print</span>(fruits[<span class="hljs-number">2</span>:])     <span class="hljs-comment"># 输出：[&#x27;cherry&#x27;, &#x27;orange&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="列表修改"><a href="#列表修改" class="headerlink" title="列表修改"></a>列表修改</h3><p>列表是可变的，意味着您可以修改列表中的元素或添加新的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;pear&quot;</span><br><span class="hljs-built_in">print</span>(fruits)  <span class="hljs-comment"># 输出：[&#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;]</span><br><br>fruits.append(<span class="hljs-string">&quot;grape&quot;</span>)<br><span class="hljs-built_in">print</span>(fruits)  <span class="hljs-comment"># 输出：[&#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="列表操作符"><a href="#列表操作符" class="headerlink" title="列表操作符"></a>列表操作符</h3><p>Python 中的列表还支持一些操作符，如连接操作符 <code>+</code> 和重复操作符 <code>*</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits2 = [<span class="hljs-string">&quot;kiwi&quot;</span>, <span class="hljs-string">&quot;melon&quot;</span>]<br>new_fruits = fruits + fruits2<br><span class="hljs-built_in">print</span>(new_fruits)  <span class="hljs-comment"># 输出：[&#x27;apple&#x27;, &#x27;pear&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;, &#x27;kiwi&#x27;, &#x27;melon&#x27;]</span><br><br><span class="hljs-built_in">print</span>(fruits2 * <span class="hljs-number">2</span>)  <span class="hljs-comment"># 输出：[&#x27;kiwi&#x27;, &#x27;melon&#x27;, &#x27;kiwi&#x27;, &#x27;melon&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h3><p>列表还提供了许多内置方法，如 <code>append()</code>、<code>insert()</code>、<code>remove()</code>、<code>pop()</code> 等，用于对列表进行各种操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits.append(<span class="hljs-string">&quot;peach&quot;</span>)  <span class="hljs-comment"># 在列表末尾添加元素</span><br>fruits.insert(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;mango&quot;</span>)  <span class="hljs-comment"># 在指定位置插入元素</span><br>fruits.remove(<span class="hljs-string">&quot;pear&quot;</span>)  <span class="hljs-comment"># 删除指定元素</span><br>popped = fruits.pop()  <span class="hljs-comment"># 删除并返回末尾元素</span><br></code></pre></td></tr></table></figure><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><p>您可以使用循环遍历列表中的所有元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(fruit)<br></code></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式是一种快速创建列表的方法，可以在一行代码中生成列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">squared_numbers = [x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)]<br><span class="hljs-built_in">print</span>(squared_numbers)  <span class="hljs-comment"># 输出：[1, 4, 9, 16, 25]</span><br></code></pre></td></tr></table></figure><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><p>列表解析是一种强大的技术，通过一行代码对列表进行转换和筛选：</p><pre><code class="python"> 数字，我们可以轻松地对列表进行运算、筛选和变换，从而实现各种功能。### 其他常见的列表操作除了上述提到的一些基本操作和用法外，Python 的列表还提供了许多其他强大的功能，如排序 `sort()`、反向排序 `reverse()`、计数 `count()`、清空 `clear()` 等方法，能够帮助您更灵活地处理列表数据。## 总结本文介绍了 Python 中列表的定义、操作和常见用法。列表是一种灵活、强大的数据结构，是 Python 编程中经常使用的重要元素之一。通过掌握列表的创建、访问、修改和其他操作，您可以更加灵活和高效地处理数据。希望这篇文章对您有所帮助，欢迎继续学习和探索 Python 编程的更多知识！</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、深入了解 Python 元祖</title>
    <link href="/2024/03/21/python/13_Python%E5%85%83%E7%A5%96/"/>
    <url>/2024/03/21/python/13_Python%E5%85%83%E7%A5%96/</url>
    
    <content type="html"><![CDATA[<p>标题：深入了解 Python 元组：定义，操作和应用</p><p>Python 的数据结构种类繁多，本文将深入探讨其中的一种：元组。我们将研究元组的定义、如何操作元组，以及元组在 Python 编程中的应用。让我们开始吧！</p><p><strong>1. 什么是 Python 元组？</strong></p><p>Python 中的元组是由一系列值组成的不可变序列。这些值可以是任何类型，并且它们都用逗号分隔，通常包含在圆括号中。</p><p>元组的特征是它们是不可变的，就像字符串一样。这意味着您不能改变元组的元素或大小。下面是一个简单的元组示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = (<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这个示例中，”apple”，”banana” 和 “cherry” 是元组 <code>fruits</code> 的元素。</p><p><strong>2. 如何操作元组？</strong></p><p>因为元组是不可变的，所以我们不能添加或删除元素，也不能修改元素。但是，我们可以对元组进行其他一些操作。</p><p><strong>访问元组元素：</strong><br>元组的索引方式和列表类似，可以使用中括号加索引的方式访问元组中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fruits[<span class="hljs-number">0</span>])   <span class="hljs-comment"># 输出：&quot;apple&quot;</span><br><span class="hljs-built_in">print</span>(fruits[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 输出：&quot;cherry&quot;</span><br></code></pre></td></tr></table></figure><p><strong>切片元组：</strong><br>我们可以使用切片操作来获取元组的部分元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fruits[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])  <span class="hljs-comment"># 输出：(&#x27;banana&#x27;, &#x27;cherry&#x27;)</span><br></code></pre></td></tr></table></figure><p><strong>合并元组：</strong><br>虽然不能修改元组，但我们可以通过连接操作来创建一个新的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">colors = (<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>)<br>fruits_and_colors = fruits + colors<br><span class="hljs-built_in">print</span>(fruits_and_colors)   <span class="hljs-comment"># 输出：(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;red&#x27;, &#x27;green&#x27;)</span><br></code></pre></td></tr></table></figure><p><strong>3. 元组 的应用</strong></p><p>元组常用于处理那些已知并且不会改变的元素序列。例如，我们在处理日期时（年，月，日），就可以使用元组。</p><p>另外一个元组的常见用途是返回函数的多个值。在 Python 中，可以在一个函数中返回元组，这样就可以一次返回多个值。看下面的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">min_max</span>(<span class="hljs-params">numbers</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(numbers), <span class="hljs-built_in">max</span>(numbers)<br><br>numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(min_max(numbers))  <span class="hljs-comment"># 输出：(2, 9)</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>min_max</code> 函数返回了一个元组，包含最小值和最大值。</p><p><strong>总结</strong></p><p>Python 元组是一种简单但非常强大的数据结构，非常适合用于处理不可变的数据序列。虽然元组的功能相对有限，但是 问题的正确使用可以极大地提高代码的可读性和安全性。</p><p>通过理解元组的特性和如何操作元组，你可以更深入地理解 Python 的数据结构，并使用它们来构建更有效的代码。</p><p>希望这篇文章能帮到正在学习 Python 的你，如果你有任何关于元组的问题或不清楚的地方，欢迎留言提问。让我们一起更深入地探索 Python 吧！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、了解 Python set</title>
    <link href="/2024/03/21/python/14_Pythonset/"/>
    <url>/2024/03/21/python/14_Pythonset/</url>
    
    <content type="html"><![CDATA[<p>在 Python 编程中，集合（Set）是一种无序、唯一的数据结构，用于存储不重复的元素。集合在处理需要唯一性的数据时非常有用，本文将深入介绍 Python 集合的定义、操作和应用，帮助您更好地掌握集合这种数据结构。</p><h2 id="什么是-Python-集合？"><a href="#什么是-Python-集合？" class="headerlink" title="什么是 Python 集合？"></a>什么是 Python 集合？</h2><p>在 Python 中，集合是一种无序、不重复的数据结构，使用大括号 <code>&#123;&#125;</code> 来定义。集合中的元素没有顺序，每个元素都是唯一的。下面是一个简单的 Python 集合示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = &#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>fruits</code> 是一个包含三种水果的集合。集合中的元素不重复，如果重复添加相同元素，集合会自动去除重复元素。</p><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>您可以使用 <code>add()</code> 方法向集合中添加新元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits.add(<span class="hljs-string">&quot;orange&quot;</span>)<br><span class="hljs-built_in">print</span>(fruits)  <span class="hljs-comment"># 输出：&#123;&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>使用 <code>remove()</code> 或 <code>discard()</code> 方法可以删除集合中的特定元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits.remove(<span class="hljs-string">&quot;banana&quot;</span>)<br><span class="hljs-built_in">print</span>(fruits)  <span class="hljs-comment"># 输出：&#123;&#x27;apple&#x27;, &#x27;cherry&#x27;&#125;</span><br><br>fruits.discard(<span class="hljs-string">&quot;peach&quot;</span>)  <span class="hljs-comment"># 如果元素不存在，discard() 不会引发错误</span><br></code></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>Python 的集合支持各种集合运算，如并集、交集、差集等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>s2 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><br>union_set = s1 | s2  <span class="hljs-comment"># 并集</span><br>intersection_set = s1 &amp; s2  <span class="hljs-comment"># 交集</span><br>difference_set = s1 - s2  <span class="hljs-comment"># 差集</span><br></code></pre></td></tr></table></figure><h3 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h3><p>Python 的集合还提供了许多有用的方法来操作集合：</p><ul><li><code>union()</code>：返回两个集合的并集。</li><li><code>intersection()</code>：返回两个集合的交集。</li><li><code>difference()</code>：返回两个集合的差集。</li><li><code>symmetric_difference()</code>：返回两个集合的对称差集（只在一个集合中出现的元素）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>s2 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><br><span class="hljs-built_in">print</span>(s1.union(s2))  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4, 5&#125;</span><br><span class="hljs-built_in">print</span>(s1.intersection(s2))  <span class="hljs-comment"># 输出：&#123;3&#125;</span><br><span class="hljs-built_in">print</span>(s1.difference(s2))  <span class="hljs-comment"># 输出：&#123;1, 2&#125;</span><br><span class="hljs-built_in">print</span>(s1.symmetric_difference(s2))  <span class="hljs-comment"># 输出：&#123;1, 2, 4, 5&#125;</span><br></code></pre></td></tr></table></figure><h2 id="集合应用"><a href="#集合应用" class="headerlink" title="集合应用"></a>集合应用</h2><p>集合在 Python 编程中广泛应用，特别适合于以下情况：</p><ul><li>去重：通过集合可以轻松去除列表或其他数据结构中的重复元素。</li><li>集合运算：可以方便地进行集合的并集、交集、差集等运算。</li><li>成员关系测试：使用集合可以高效地测试元素是否存在于集合中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去重示例</span><br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>unique_numbers = <span class="hljs-built_in">set</span>(numbers)<br><span class="hljs-built_in">print</span>(unique_numbers)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4&#125;</span><br></code></pre></td></tr></table></figure><p>通过深入了解 Python 集合的定义、操作和应用，您可以更有效地利用集合来处理数据，并编写更简洁、高效的代码。希望本文对您加深对 Python 集合的理解有所帮助。如有任何疑问或需要进一步了解，欢迎留言交流。祝学习愉快！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、 Python 字典</title>
    <link href="/2024/03/21/python/15_Python%E5%AD%97%E5%85%B8/"/>
    <url>/2024/03/21/python/15_Python%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<p>在 Python 编程中，字典（Dictionary）是一种非常重要的数据结构，用于存储键值对。字典是一种可变、无序的数据集合，其键和值之间存在唯一的映射关系。本篇文章将深入讲解 Python 字典的定义、操作和应用，帮助您更好地理解和运用这种强大的数据结构。</p><h2 id="什么是-Python-字典？"><a href="#什么是-Python-字典？" class="headerlink" title="什么是 Python 字典？"></a>什么是 Python 字典？</h2><p>Python 字典是一种键值对的集合，用花括号 <code>&#123;&#125;</code> 定义，每个键值对之间用冒号 <code>:</code> 分隔。字典中的键必须是唯一的，而值则没有唯一性要求。下面是一个简单的 Python 字典示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fruit_dict = &#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;banana&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;cherry&quot;</span>: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，<code>&quot;apple&quot;</code>, <code>&quot;banana&quot;</code> 和 <code>&quot;cherry&quot;</code> 是字典 <code>fruit_dict</code> 的键，对应的值分别为 <code>2</code>, <code>3</code> 和 <code>5</code>。</p><h2 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h2><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><p>可以使用键来访问字典中的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fruit_dict[<span class="hljs-string">&quot;banana&quot;</span>])  <span class="hljs-comment"># 输出：3</span><br></code></pre></td></tr></table></figure><h3 id="添加或修改元素"><a href="#添加或修改元素" class="headerlink" title="添加或修改元素"></a>添加或修改元素</h3><p>可以通过键来添加新的键值对或修改已有键的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fruit_dict[<span class="hljs-string">&quot;orange&quot;</span>] = <span class="hljs-number">4</span>  <span class="hljs-comment"># 添加新键值对</span><br>fruit_dict[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">6</span>   <span class="hljs-comment"># 修改已有键的值</span><br></code></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>使用 <code>del</code> 关键字或 <code>pop()</code> 方法来删除字典中的键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> fruit_dict[<span class="hljs-string">&quot;cherry&quot;</span>]    <span class="hljs-comment"># 删除键为 &quot;cherry&quot; 的键值对</span><br><br>removed_value = fruit_dict.pop(<span class="hljs-string">&quot;banana&quot;</span>)  <span class="hljs-comment"># 删除键为 &quot;banana&quot; 的键值对，并返回其值</span><br></code></pre></td></tr></table></figure><h3 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h3><p>Python 字典提供了丰富的 方法来操作字典，例如：</p><ul><li><code>keys()</code>：返回字典中所有的键。</li><li><code>values()</code>：返回字典中所有的值。</li><li><code>items()</code>：返回字典中所有的键值对。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 遍历所有键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> fruit_dict.keys():<br>    <span class="hljs-built_in">print</span>(key)<br><br><span class="hljs-comment"># 遍历所有值</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> fruit_dict.values():<br>    <span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-comment"># 遍历所有键值对</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> fruit_dict.items():<br>    <span class="hljs-built_in">print</span>(key, value)<br></code></pre></td></tr></table></figure><h3 id="字典应用"><a href="#字典应用" class="headerlink" title="字典应用"></a>字典应用</h3><p>字典在 Python 编程中有着广泛的应用，特别适合以下场景：</p><ul><li>数据存储：适用于存储需要通过唯一键访问的数据。</li><li>快速查找：由于字典使用哈希表实现，查找速度非常快。</li><li>数据处理：用于处理数据，统计频率等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 快速查找示例</span><br>fruits = &#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;banana&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;cherry&quot;</span>: <span class="hljs-number">8</span>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We have apple in stock.&quot;</span>)<br><br><span class="hljs-comment"># 数据处理示例</span><br>word_freq = &#123;&#125;<br>words = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>]<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> word_freq:<br>        word_freq[word] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        word_freq[word] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(word_freq)  <span class="hljs-comment"># 输出：&#123;&quot;apple&quot;: 2, &quot;banana&quot;: 1, &quot;cherry&quot;: 1&#125;</span><br></code></pre></td></tr></table></figure><p>通过深入了解 Python 字典的定义、操作和应用，您可以更加灵活地处理数据，并写出更加高效的Python程序。希望本文对您有所帮助，如有任何问题或疑问，欢迎留言讨论。祝学习愉快！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>教程</tag>
      
      <tag>编程</tag>
      
      <tag>基础教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot导出静态文件</title>
    <link href="/2024/03/18/springboot/springboot%E5%AF%BC%E5%87%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <url>/2024/03/18/springboot/springboot%E5%AF%BC%E5%87%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<pre><code class="bash">import org.springframework.core.io.ClassPathResource;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URLEncoder;public class LocalFileUtils &#123;    /**     * @param response     * @param fileName     * @description 根据指定项目路径下的某个excel, 下载文件     */    public static void exportFile(HttpServletResponse response, String fileName) &#123;        // 第一种获取静态资源        ClassPathResource classPathResource = new ClassPathResource(&quot;static/&quot; + fileName);// &quot;static/excleTemplate/ImportModel.xlsx&quot;        // 第二种获取静态资源        // InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;static/excleTemplate/&quot; + fileName);        // 第三种获取静态资源        // InputStream inputStream = this.getClass().getResourceAsStream(&quot;static/excleTemplate/&quot; + fileName);        InputStream inputStream = null;        OutputStream outputStream = null;        try &#123;            inputStream = classPathResource.getInputStream();            outputStream = response.getOutputStream();            int BUFFER_SIZE = 1024 * 4;            byte[] buffer = new byte[BUFFER_SIZE];            int reader = 0;            while ((reader = inputStream.read(buffer)) != -1) &#123;                outputStream.write(buffer, 0, reader);            &#125;            response.setContentType(&quot;application/octet-stream&quot;);            response.setCharacterEncoding(&quot;utf-8&quot;);            String newFileName = URLEncoder.encode(classPathResource.getFilename(), &quot;UTF-8&quot;);            response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename=&quot; + newFileName);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally &#123;            try &#123;                if (outputStream != null) &#123;                    /**flush():仅仅刷新缓冲区(一般写字符时要用,因为字符时先进入缓冲区),然后将内存中的数据立刻写出(因为缓冲区是装满之后才会写出                     ,用flush()就不必等到缓冲区满,立刻写出,流对象还可以继续使用) */                    outputStream.flush();                    /**close():关闭流对象. 也会先刷新一次缓冲区,再关闭. 关闭之后,流对象不可以继续使用 */                    outputStream.close();                    inputStream.close();                &#125;            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125; @RequestMapping(value = &quot;exportFile&quot;, method = RequestMethod.POST)    public void exportFile(HttpServletResponse response) &#123;        String fileName = &quot;排班.xlsx&quot;;        LocalFileUtils.exportFile(response, fileName);    &#125;```bash</code></pre>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>yml颜色显示灰色</title>
    <link href="/2024/03/18/springboot/yml%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2024/03/18/springboot/yml%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>确实，在Spring Boot项目中，<code>bootstrap.yml</code>文件的作用主要是用于系统启动时加载一些配置信息。例如，我们使用Spring Cloud Config配置中心时，就需要通过<code>bootstrap.yml</code>来指定Config Server的地址。将<code>bootstrap.yml</code>与<code>application.yml</code>同时使用时，<code>bootstrap.yml</code>配置的优先级更高。</p><p>如果<code>bootstrap.yml</code>没有生效，通常原因可能是你的Spring Cloud项目缺少相应的依赖。请按照以下步骤操作：</p><ul><li>方法一：<br>第一步，你需要在项目中添加spring-cloud-starter-bootstrap的依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>方法二：<br>如果方法一不起作用，那么可以尝试仅引入spring-cloud-context：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：<code>$&#123;spring-cloud.version&#125;</code>中的版本号需要与你使用的Spring boot版本对应。</p><p>最后，确保你正确配置了<code>bootstrap.yml</code>文件，并将其放在<code>src/main/resources</code>文件夹下。如有必要，可以尝试删除原有配置文件并重新创建一份新的配置文件以确保所有配置都是最新的。</p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>建立自己的博客</title>
    <link href="/2024/03/12/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/12/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h2 id="1-安装-Node-js-和-npm"><a href="#1-安装-Node-js-和-npm" class="headerlink" title="1. 安装 Node.js 和 npm"></a>1. 安装 Node.js 和 npm</h2><ul><li>前往 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装最新版本的 Node.js。</li><li>安装完成后，你可以在命令行中运行以下命令来验证是否成功安装：<br>node -v<br>npm -v</li></ul><p>Copy code</p><h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><ul><li>如果你的系统中还没有安装 Git，你可以在 <a href="https://git-scm.com/">Git 官网</a> 下载并安装。</li><li>安装完成后，你可以在命令行中运行以下命令来验证是否成功安装：<br>git –version</li></ul><h2 id="3-全局安装-Hexo"><a href="#3-全局安装-Hexo" class="headerlink" title="3. 全局安装 Hexo"></a>3. 全局安装 Hexo</h2><ul><li>打开命令行终端，运行以下命令来全局安装 Hexo-cli：<br>npm install -g hexo-cli</li></ul><p>markdown<br>Copy code</p><h2 id="4-初始化-Hexo-项目"><a href="#4-初始化-Hexo-项目" class="headerlink" title="4. 初始化 Hexo 项目"></a>4. 初始化 Hexo 项目</h2><ul><li>在你想要创建 Hexo 博客的目录中，打开命令行终端，运行以下命令来初始化一个新的 Hexo 项目：<br>hexo init myblog</li></ul><h2 id="5-进入项目目录并安装依赖"><a href="#5-进入项目目录并安装依赖" class="headerlink" title="5. 进入项目目录并安装依赖"></a>5. 进入项目目录并安装依赖</h2><ul><li><p>进入项目目录：<br>cd myblog</p></li><li><p>在项目目录中运行以下命令来安装项目所需的依赖：<br>npm install</p></li></ul><h2 id="6-启动本地服务器"><a href="#6-启动本地服务器" class="headerlink" title="6. 启动本地服务器"></a>6. 启动本地服务器</h2><ul><li>在项目目录中运行以下命令来启动 Hexo 的本地服务器：<br>hexo server</li></ul><p>less</p><ul><li>这将启动一个本地服务器，默认情况下访问地址为 <a href="http://localhost:4000/">http://localhost:4000</a>。</li></ul><p>现在，你已经成功安装和初始化了 Hexo 项目。你可以开始编写文章、定制主题，并通过部署将博客发布到线上。<br>这是一个使用Markdown格式编写的Hexo安装步骤，你可以将其保存为.md文件，然后在Hexo博客中使用。</p><h2 id="部署GitHub-Pages"><a href="#部署GitHub-Pages" class="headerlink" title="部署GitHub Pages"></a>部署GitHub Pages</h2><p>我们假定你已经有一个GitHub账号而且已经配置好git了，不知道应该怎么做的话可以参考这篇博客。</p><p>现在新建一个仓库（Create a new repository），Repository name填写为&lt;你的GitHub用户名&gt;.github.io，例如“ChaoiteC.github.io”，同时仓库可见性必须为Public（对所有人可见）。</p><p>如果操作正确，你会在仓库设置中找到Page选项。</p><p>现在打开博客根目录下的_config.yml，找到Deployment相关配置项，如下填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:&lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>你可能注意到官方文档与一些其他教程中repo项填写的是http链接，这也是可以的，但在使用GitHub Actions部署时可能会遭遇拒绝访问的问题。</p><p>安装hexo-deployer-git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo deploy 或者简写为： $ hexo d<br>或者简写为：<br><br>bash<br>Copy code<br>$ hexo d -g<br></code></pre></td></tr></table></figure><p>deploy命令会将public目录中的文件和目录推送至_config.yml中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</p><p>如果一切工作正常，现在你可以在&lt;你的GitHub用户名&gt;.github.io中看到网站内容。</p><p>##GitHub Actions自动部署（可选）<br>我们很快注意到，一旦你离开现在使用的设备，你就无法修改网站内容。当你更换设备时，你不得不将上述步骤全部重复。一旦设备出现故障更是会损失惨重。这些矛盾呼吁我们采取方法，要求我们能自动地储存与部署博客文件，而不受手上设备的限制。</p><p>GitHub Actions为我们在需要的时候创建一个容器，我们在容器中安装软件并处理我们的博客文件，最后部署到Pages仓库中。现在我们来实现它。</p><p>前提<br>首先在Github上新建一个仓库用来储存我们的博客文件，通常我们将其设为私有的。</p><p>如果你安装了VS Code，这时候你可以在博客根目录右键菜单中选择“在终端中打开”来启动Windows Powershell，然后输入并执行：</p><p>code .<br>此命令将会启动VS Code并在其中打开这个文件夹。然后你可以在侧边栏中打开源代码管理页面，从GitHub添加远程库。只需要按照提示操作，你最终能将整个目录下的文件上传到仓库中（被.gitignore指定的文件&#x2F;文件夹不会上传）。</p><p>我们将上面内容视为准备操作，如果你不知道如何操作，可以寻求搜索引擎的帮助。</p><p>部署密钥<br>现在在“git bash here”中执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -f github-deploy-key<br></code></pre></td></tr></table></figure><p>这个命令将生成部署密钥，你只需要一直按空格，根目录下就会出现两个文件：github-deploy-key和github-deploy-key.pub。</p><p>注意</p><p>正如其名字，除非你确定自己在做什么，否则你不应该将密钥直接上传到仓库（尤其是公共仓库）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">在博客源文件仓库中依序打开Settings-&gt;Secrets and variables-&gt;Actions-&gt;New repository secret。<br></code></pre></td></tr></table></figure><p>在Name中填写“HEXO_DEPLOY_PRI”，在Value中填写github-deploy-key文件中的全部内容（包括头尾的文字）。然后Add secret。</p><p>在Page仓库中依序打开Settings-&gt;Deploy keys-&gt;Add deploy key。</p><p>在Title中填写“HEXO_DEPLOY_PUB”，在Key中填写github-deploy-key.pub文件中的全部内容，勾选Allow write access，然后Add key。</p><p>配置GitHub Actions<br>在博客根目录下创建.github&#x2F;workflows&#x2F;deploy.yml文件，目录结构如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>└── .github<br>    └── workflows<br>        └── deploy.yml<br>在deploy.yml文件中粘贴下面内容并在对应地方作改动。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Action&#x27;s Name</span><br>name: AutoDeploy<br><br>on:<br>  <span class="hljs-comment"># Triggering Condition 1 Main Branch Performs The Task After Receiving Push</span><br>  push:<br>    branches:<br>      - main<br>  <span class="hljs-comment"># Triggering Condition 2 Manual Button</span><br>  workflow_dispatch:<br><br><span class="hljs-comment"># Putting Environment Variables Here You Need To Replace It With Your Own</span><br><span class="hljs-built_in">env</span>:<br>  <span class="hljs-comment"># After Hexo Compiles Use This Git User To Deploy To The Github Warehouse</span><br>  GIT_USER: &lt;你的GitHub用户名&gt;<br>  <span class="hljs-comment"># After Hexo Compiles Use This Git Mailbox To Deploy To The Github Warehouse</span><br>  GIT_EMAIL: &lt;你的GitHub用户邮箱&gt;<br>  <span class="hljs-comment"># The Git Hub Warehouse To Be Deployed After Hexo Compiles</span><br>  GIT_DEPLOY_REPO: &lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io<br>  <span class="hljs-comment"># Hexo Compiles The Branch To Deploy After Compilation</span><br>  GIT_DEPLOY_BRANCH: main<br><br><span class="hljs-built_in">jobs</span>:<br>  build:<br>    name: Build on node <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125; and <span class="hljs-variable">$&#123;&#123; matrix.os &#125;</span>&#125;<br>    runs-on: ubuntu-latest<br>    <span class="hljs-keyword">if</span>: github.event.repository.owner.id == github.event.sender.id<br>    strategy:<br>      matrix:<br>        os: [ubuntu-latest]<br>        node_version: [16.x]<br><br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v4<br><br>      - name: Checkout deploy repo<br>        uses: actions/checkout@v4<br>        with:<br>          repository: <span class="hljs-variable">$&#123;&#123; env.GIT_DEPLOY_REPO &#125;</span>&#125;<br>          ref: <span class="hljs-variable">$&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;</span>&#125;<br>          path: .deploy_git<br><br>      - name: Use Node.js <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125;<br>        uses: actions/setup-node@v1<br>        with:<br>          node-version: <span class="hljs-variable">$&#123;&#123; matrix.node_version &#125;</span>&#125;<br><br>      - name: Configuration environment<br>        <span class="hljs-built_in">env</span>:<br>          HEXO_DEPLOY_PRI: <span class="hljs-variable">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;</span>&#125;<br>        run: |<br>          sudo timedatectl set-timezone <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>          <span class="hljs-built_in">mkdir</span> -p ~/.ssh/<br>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HEXO_DEPLOY_PRI</span>&quot;</span> &gt; ~/.ssh/id_rsa<br>          <span class="hljs-built_in">chmod</span> 600 ~/.ssh/id_rsa<br>          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts<br>          git config --global user.name <span class="hljs-variable">$GIT_USER</span><br>          git config --global user.email <span class="hljs-variable">$GIT_EMAIL</span><br><br>      - name: Install dependencies<br>        run: |<br>          npm install hexo-cli -g<br>          <span class="hljs-comment"># Install According To The Components You Installed</span><br>          npm install - gulp gulp-uglify hexo hexo-deployer-git hexo-generator-archive hexo-generator-category hexo-generator-feed hexo-generator-index hexo-generator-search hexo-generator-searchdb hexo-generator-sitemap hexo-generator-tag hexo-renderer-ejs hexo-renderer-marked hexo-renderer-pug hexo-renderer-stylus hexo-server hexo-tag-cloud hexo-word-counter readable-stream uglify-es --save<br><br>      - name: Deploy hexo<br>        run: |<br>          npm run deploy<br></code></pre></td></tr></table></figure><p>现在你可以尝试在博客源文件仓库中作一点改动并推送到远程库，接着在仓库的Actions页面中观察工作是否正常（不被打红叉）。如果正常，大约在1-2分钟内会完成自动部署任务，你能在Pages上确认到更改。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis实现限流和分布式锁</title>
    <link href="/2024/03/12/Redis/Redis%E9%94%81/"/>
    <url>/2024/03/12/Redis/Redis%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>##Redis实现限流和分布式锁<br>首先添加jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>&lt;groupId&gt;org.redisson&lt;/groupId&gt;<br>&lt;artifactId&gt;redisson&lt;/artifactId&gt;<br>&lt;version&gt;3.24.3&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>如果缺少类请查看这个地址<br><a href="https://mvnrepository.com/artifact/org.redisson/redisson/3.24.3">https://mvnrepository.com/artifact/org.redisson/redisson/3.24.3</a><br>他会显示这个包所相关的jar包和版本号<br>然后就是配置redisson  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">package com.rfca.config;<br><br>import org.redisson.Redisson;<br>import org.redisson.config.Config;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.stereotype.Component;<br><br>@Component<br>public class RedisConfig &#123;<br>    // 1. Create config object<br>    @Bean<br>    public Redisson <span class="hljs-function"><span class="hljs-title">redisson</span></span>() &#123;<br><br>        Config config = new Config();<br><br>        config.useSingleServer()<br>                .setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>)<br>                .setPassword(<span class="hljs-string">&quot;12345&quot;</span>); // 替换为你的 Redis 密码<br>        <span class="hljs-built_in">return</span> (Redisson) Redisson.create(config);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我们实现高并发的时候，还需要考虑限流<br>这是我的一个实现类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">package com.rfca.config;<br><br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Component;<br>import redis.clients.jedis.ShardedJedis;<br>import redis.clients.jedis.ShardedJedisPool;<br><br>@Component<br>public class RateLimiter &#123;<br>    @Autowired<br>    private ShardedJedisPool shardedJedisPool;<br><br>    public boolean isAllowed(String key, int <span class="hljs-built_in">limit</span>, int windowSizeInSeconds) &#123;<br>        try (ShardedJedis jedis = shardedJedisPool.getResource()) &#123;<br>            String redisKey = String.format(<span class="hljs-string">&quot;rate_limiter:%s&quot;</span>, key);<br><br>            // 获取当前时间戳<br>            long timestamp = System.currentTimeMillis() / 1000;<br><br>            // 获取窗口起始时间<br>            long windowStart = timestamp - windowSizeInSeconds;<br><br>            // 统计窗口内的请求数量<br>            long count = jedis.zcount(redisKey, windowStart, timestamp);<br><br>            // 判断是否允许请求<br>            <span class="hljs-built_in">return</span> count &lt; <span class="hljs-built_in">limit</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">@GetMapping(<span class="hljs-string">&quot;/limited-resource&quot;</span>)<br>    public ResponseEntity&lt;String&gt; accessLimitedResource(HttpServletRequest request) &#123;<br>        String key = <span class="hljs-string">&quot;resourceAccessKey&quot;</span>; // 用于标识资源的键<br>        int <span class="hljs-built_in">limit</span> = 10000; // 限制次数<br>        int windowSizeInSeconds = 60; // 时间窗口，例如1分钟<br><br>        boolean isAllowed = rateLimiter.isAllowed(key, <span class="hljs-built_in">limit</span>, windowSizeInSeconds);<br>        <span class="hljs-keyword">if</span> (isAllowed) &#123;<br>            // 获取缓存<br>            String keyparam = request.getParameter(<span class="hljs-string">&quot;30610002&quot;</span>);<br>            RBucket&lt;Integer&gt; bucket = redisson.getBucket(keyparam); // 获取 RBucket 对象<br>            String lock = <span class="hljs-string">&quot;mylock&quot;</span>; // 此处使用全局锁，可以针对不同资源进行加锁，减少锁的粒度<br>            RLock lock1 = redisson.getLock(lock);<br>            Integer nums1 = bucket.get();<br>            <span class="hljs-keyword">if</span> (nums1 == 0) &#123;<br>                log.info(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>                <span class="hljs-built_in">return</span> ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>            &#125;<br>            lock1.lock();//阻塞式等待，默认加的锁都是30s时间<br>            try &#123;<br>                log.info(<span class="hljs-string">&quot;加锁成功，执行业务...&quot;</span> + Thread.currentThread().getId()); // 打印获取到锁的线程ID<br>                Integer nums = bucket.get();<br>                <span class="hljs-keyword">if</span> (nums != null &amp;&amp; nums &gt; 0) &#123;<br>                    String parkingLotId = request.getParameter(<span class="hljs-string">&quot;30610002&quot;</span>);<br>                    SelectByparkinglotidResult selectByparkinglotidResult = monthlyCardRulesMapper.selectByparkinglotid(parkingLotId).get(0);<br>                    MonthlyCardRules monthlyCardRules = new MonthlyCardRules();<br>                    monthlyCardRules.setId(selectByparkinglotidResult.getId());<br>                    monthlyCardRules.setNums(nums - 1);<br>                    monthlyCardRulesMapper.updateByPrimaryKeySelective(monthlyCardRules);<br>                    log.info(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>                    bucket.set(nums - 1);<br>                    <span class="hljs-built_in">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;请求成功&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.info(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>                    <span class="hljs-built_in">return</span> ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>                &#125;<br>            &#125; catch (Exception e) &#123;<br>                log.info(<span class="hljs-string">&quot;获取锁失败&quot;</span>);<br>                <span class="hljs-built_in">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;没有抢到&quot;</span>);<br>            &#125; finally &#123;<br>                <span class="hljs-keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;<br>                    log.info(<span class="hljs-string">&quot;释放锁...&quot;</span> + Thread.currentThread().getId());<br>                    lock1.unlock();<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">return</span> ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(<span class="hljs-string">&quot;请求过多，请稍后再试&quot;</span>);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>安装工具压测<br>要在计算机上安装 JMeter，请按照以下步骤进行操作：</p><p>下载 JMeter：</p><p>前往 Apache JMeter 的官方网站：<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a><br>导航至 Downloads 页面。<br>选择最新版本的 Apache JMeter，通常可以在页面顶部找到。确保选择与你的操作系统兼容的版本。<br>解压下载的文件：</p><p>下载完成后，解压缩下载的压缩文件。你可以使用文件压缩软件（如 WinRAR、7-Zip）进行解压缩。<br>解压后会得到一个文件夹，里面包含 JMeter 的可执行文件和其他必要文件。<br>启动 JMeter：</p><p>进入解压后的文件夹，在其中找到 JMeter 的可执行文件，它的名称可能是 jmeter.bat（Windows）或 jmeter.sh（Unix&#x2F;Linux）。<br>双击运行 jmeter.bat 或 jmeter.sh 文件，即可启动 JMeter。<br>验证安装：</p><p>当 JMeter 启动后，你会看到 JMeter 的 GUI（图形用户界面）。<br>如果 GUI 成功启动，表示 JMeter 已经成功安装并可以正常运行。<br>可选步骤 - 配置环境变量（仅限 Unix&#x2F;Linux）：</p><p>如果你在 Unix&#x2F;Linux 系统上使用 JMeter，你可能希望将 JMeter 添加到系统路径中，以便从任何位置运行 JMeter。<br>若要配置环境变量，请编辑 ~&#x2F;.bashrc 文件，并添加以下行：<br>ruby<br>Copy code<br>export PATH&#x3D;$PATH:&#x2F;path&#x2F;to&#x2F;jmeter&#x2F;bin<br>其中 &#x2F;path&#x2F;to&#x2F;jmeter 是你解压 JMeter 的文件夹的路径。<br>开始使用 JMeter：</p><p>启动 JMeter 后，你可以开始创建并运行测试计划，执行性能测试、接口测试等操作。你可以在 JMeter 的 GUI 中创建和管理测试计划，并使用不同的组件来模拟各种场景。<br>通过以上步骤，你应该可以成功下载、安装并启动 JMeter，并开始使用它进行性能测试和接口测试等任务。  </p><p>当使用 JMeter 创建并发请求时，你需要按照以下步骤操作：</p><p>启动 JMeter： 运行 JMeter，等待它完全加载。</p><p>创建测试计划： 在 JMeter 左侧的 Test Plan (测试计划) 上右键，选择 “Add” -&gt; “Threads (Users)” -&gt; “Thread Group”。这将添加一个线程组，你可以在其中定义并发用户的数量和其他配置。</p><p>添加 HTTP 请求： 在刚创建的线程组上右键，选择 “Add” -&gt; “Sampler” -&gt; “HTTP Request”。在 HTTP 请求的配置中，填入你的接口 URL：<a href="http://localhost:8088/stpweb/limited-resource.do?30610002=30610002%E3%80%82">http://localhost:8088/stpweb/limited-resource.do?30610002=30610002。</a></p><p>配置并发用户数： 在刚创建的线程组下，你可以设置并发用户的数量。可以在 “Number of Threads (users)” 字段中指定要模拟的并发用户数。</p><p>运行测试： 点击 JMeter 工具栏上的绿色运行按钮来启动测试。JMeter 将发送指定数量的并发请求到你的接口地址。</p><p>查看结果： 在测试执行完成后，你可以查看结果。可以使用 JMeter 提供的各种监听器（Listeners）来查看请求响应时间、吞吐量、错误率等性能指标。</p><p>以上是基本的步骤，你可以根据你的测试需求进一步调整配置，例如设置请求参数、添加断言、配置定时器等。JMeter 提供了丰富的功能和组件来满足不同场景下的测试需求，你可以根据具体情况进行使用。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用Linux命令</title>
    <link href="/2024/03/12/linux/linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/03/12/linux/linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>##文件复制移动<br>A目录到B目录复制所有文件<br>mv &#x2F;path&#x2F;a&#x2F;* . &#x2F;b<br>需要覆盖文件 mv -f<br>##权限<br>赋予当前文件夹下所有sh文件可执行权限  </p><p>chmod +x *.sh</p>]]></content>
    
    
    <categories>
      
      <category>linux命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022案例分析</title>
    <link href="/2024/03/12/ruankao/2022%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <url>/2024/03/12/ruankao/2022%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>【说明】<br>某电子商务公司拟升级其会员与促销管理系统，向用户提供个性化服务，提高用户的粘性。在项目立项之初，公司领导层一致认为本次升级的主要目标是提升会员管理方式的灵活性，由于当前用户规模不大，业务也相对简单，系统性能方面不做过多考虑。新系统除了保持现有的四级固定会员制度外，还需要根据用户的消费金额、偏好、重复性等相关特征动态调整商品的折扣力度，并支持在特定的活动周期内主动筛选与活动主题高度相关的用户集合，提供个性化的打折促销活动。<br>在需求分析与架构设计阶段，公司提出的需求和质量属性描述如下:<br>(a)管理员能够在页面上灵活设置折扣力度规则和促销活动逻辑，设置后即可生效;(互操作性)<br>(b)系统应该具备完整的安全防护措施，支持对恶意攻击行为进行检测与报警;（安全性）<br>(c)在正常负载情况下，系统应在0.3秒内对用户的界面操作请求进行响应;（性能）<br>(d)用户名是系统唯一标识，要求以字母开头，由数字和字母组合而成，长度不少于6个字符:（功能性）<br>(e)在正常负载情况下，用户支付商品费用后在3秒内确认订单支付信息;（性能）<br>(f)系统主站点电力中断后，应在5秒内将请求重定向到备用站点;（可用性）<br>(g)系统支持横向存储扩展，要求在2人天内完成所有的扩展与测试工作;（可修改性）第一次判断为（可测试性）判断错误<br>(h)系统宕机后，需要在10秒内感知错误，并自动启动热备份系统;（可用性）<br>(i)系统需要内置接口函数，支持开发团队进行功能调试与系统诊断;（可测试性）<br>(j)系统需要为所有的用户操作行为进行详细记录，便于后期查阅与审计;（安全性）<br>(k)支持对系统的外观进行调整和配置，调整工作需要在4人天内完成。（可修改性）在对系统需求、质量属性描述和架构特性进行分析的基础上，系统架构师给出了两种候选的架构设计方案，公司目前正在组织相关专家对系统架构进行评估。<br>1安全性 2可修改性 3e 4j 5h 6 k<br>补充知识：质量属性有那些：性能，可靠性，可用性，安全性，可修改性，功能性，可变性（体系结构扩充变更），互操作性<br>问题2答案<br>使用解释器风格<br>折扣规则可改性 解释器风格可以灵活配置新的规则，只需要导入配置或者新增解释规则就行，可以灵活的修改，面相对象则需要修改具体的类，具体的方法。<br>灵活性     解释器风格可以灵活的设计规则计算表达式，灵活性较好，面相对象需要使用策略模式具体实现对应的类和方法，灵活性较差。<br>性能 面向对象使用预先编译的方式，解释器需要动态解析绑定，性能方面略优，但是本系统对性能的要求不是特别高，综合考虑使用解释器风格更好。<br>##试题2<br>软件系统设计与建模<br>问题1f 2g 3h 4d 5b 6e<br>数据流图在分层细化结构中遵循的数据平衡原则：<br>层间平衡：数据流个数一致，方向一致<br>图内平衡 : 对于数据流图的任意一个加工 , 既有输入 , 又有输出 ;<br>问题2<br>1项目管理员 2项目经理 3项目指标 4项目信息 5关联事故 6影响因素<br>问题3<br>分析阶段：<br>数据流图 界定系统上下文，建立业务的加工说明，自顶向下的分析系统需求<br>数据字典 用于建立业务概念有组织的集合，有组织的系统相关的元素列表，有助于使全体人员对模型中的元素有共同的理解<br>设计阶段：<br>数据流 为模块划分和模块之间的接口设计提供依据<br>数据字典 根据数据字典中的描述建立数据库的存储设计<br>##试题3<br>问题 1)心跳是一种用于故障检测的手段。分布式系统中，各种异常，如:宕机、磁盘损坏、网络故障等时有发生，通过心跳可以快速有效的定位集群中的错误结点，并做及时的处理保证集群正常服务通常探针会不断发送健康检查来检查服务是否健康。当远程节点没有响应时,我们只能猜测数据包在过程中的某个地方丢失了。下一个操作将是重试或等待一段时间，直到超时。<br>【问题 2】<br>(1)(2):be<br>(3):f<br>(4)(5)(6):adh<br>(7)(8)gc<br>【问题 3】<br>通过对系统运行过程中的监测数据进行分析，从而在无精准系统数学模型情况下，对系统进行故障诊断，具体方法包括机器学习、统计分析法和信号分析法。<br>因为宇航系统是一个非常复杂的系统，如果采用张工的方案(基于解析模型的方法)，这一类方法需要建立再精准数学模型的基础上来进行故障诊断。但是对于字航系统这种非常复杂的系统难以精确建模。所以王工提出了数据驱动的方法，不需要精准系统数学模型。<br>##试题4<br>【问题 1】<br>实时方案:当数据库数据更新时，同时更新内存的缓存数据。<br>异步准实时更新方案:当数据库数据更新时，不立即更新缓存数据，而是将需要更新的操作记成日志，再逐步排队完成更新。<br>本题中，建议采用准实时方案，理由是:题目中对性能有严格要求，要求1s内完成。实时同方案最大的问题在于同步并发时的性能不可控。所以准实时方案才能确保该要求能实现。<br>【问题 2】<br>哈希分片:通过对 key 进行hash 操作，可以把数据分配到不同实例，这类似于取余操作，余数相同的，放在一个实例上。<br>一致性哈希分片:哈希分片的改进，把存储结点和需要存储的数据都存放在一个hash环上，数据根据 hash 值在hash 环上按正时针方向找到对应的数据存储结点上。<br>-致性哈希分片的方式在扩充缓存结点时，只需要对少量数据进行存储位置的更新，而哈希分片需要对几乎所有数据进行存储位置更新。<br>【问题 3】<br>布隆过滤器是通过一个很长的二进制向量和一些散列函数判断一个数据是否在集合中，如果不在就不用查询数据库，如果散列函数的值都为1则数据数据存在，如果任何一个为0，一定不存在<br>优点 占用内存小 速度快 可以从海量数据中判断一个数据是否存在，不许要存储元素本身，在某些保密场景中非常适用。<br>缺点 删除操作不方便，而且存在一定误判率， 不能获取元素本身，计数删除可能存在计数环绕问题<br>##试题5<br>mqtt协议是一个基于发布&#x2F;订阅的消息协议，建立在tcp&#x2F;ip协议至上。专门针对网络环境不稳定的远程设备和硬件性能低的设备设计的发布订阅协议，具有轻量，简单，开放，易于实现的特点。<br>1http 2mqtt 3mqtt 4mqtt 5http 6http 7端侧识别 8模型训练 9设备调度 10 访客注册模块<br>数据通信:通信更快捷，数据量更少。因为数据处理对比在边缘设备上完成，通信更多时候只传输匹配与结果的指令。<br>数据安全:数据以加密方式存储在需要用到的边缘设备上，本地化处理比对，减少原始信息在网上的传递带来的安全隐患。黑客也无法通过攻破一个结点使整个系统瘫痪。<br>系统性能:性能更高，以人脸识别为例，在进行识别时，只在本地进行比对不用把人脸数据传递到远程服务器对比</p>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息摘要</title>
    <link href="/2024/03/12/ruankao/%E4%BF%A1%E6%81%AF%E6%91%98%E8%A6%81/"/>
    <url>/2024/03/12/ruankao/%E4%BF%A1%E6%81%AF%E6%91%98%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<p>信息摘要<br>所谓信息摘要，就是一段数据的特征信息，当数据发生了改变，信息摘要也会发生改变，发送方会将数据和信息摘要一起传给接收方，接收方会根据接收到的数据重新生成一个信息摘要，若此摘要和接收到的摘要相同，则说明数据正确。信息摘要是由哈希函数生成的<br>信息摘要算法:MD5-产生128位的输出)SHA-1(安全散列算法，产生160位的输出，安全性更高)<br>数字签名<br>标识唯一发送方<br>发送者发送数据时，使用发送者的（私钥）进行加密，接收者收到数据后，只能使用发送者的（公钥）进行解密，这样就能唯一确定发送方，这也是数字签名的过程但无法保证机密性。</p>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>案例分析</title>
    <link href="/2024/03/12/ruankao/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <url>/2024/03/12/ruankao/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="必背知识点"><a href="#必背知识点" class="headerlink" title="必背知识点"></a>必背知识点</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>质量属性<br>性能，可靠性，可用性，安全性，可修改性，互操作性，功能性，可变性</p><p>敏感点:为了实现某种特定的质量属性，一个或者多个构件所具有的特性。  </p><p>权衡点：影响多个质量属性的特性，是多个质量属性的敏感点。  </p><p>架构风险：是一种常规概念，既可能引起风险的因素，称为风险点。某个做法如果有隐患，有可能 导致一些问题，就成为风险点，如果某件事情可行，是可接受的，则是非风险点。</p><h2 id="架构风格"><a href="#架构风格" class="headerlink" title="架构风格"></a>架构风格</h2><p>概念<br>什么是架构风格</p><ul><li>软件体系结构风格是描述某一特定应用领域中系统组织方式的惯用模式。架构风格定义一个系统家族，即-个架构定义、一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。</li><li>架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件架构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。</li><li>架构设计的一个核心问题是能否达到架构级的软件复用<br>架构风格定义了用于描述系统的术语表和一组指导构建系统的规则，</li></ul><h2 id="架构风格分类"><a href="#架构风格分类" class="headerlink" title="架构风格分类"></a>架构风格分类</h2><h3 id="数据流风格"><a href="#数据流风格" class="headerlink" title="数据流风格"></a>数据流风格</h3><p>批处理<br>管道过滤器<br>二者区别在于批处理前后构件不一定有关联，并且是作为整体传递，即必须前一个执行完才能执行下一个。管道-过滤器是前一个输出作为后一个输入，前面执行到部分可以开始下一个的执行。<br>优点：独立性好，复用性好，可扩展良好<br>缺点：交互性差</p><h3 id="调用返回风格"><a href="#调用返回风格" class="headerlink" title="调用返回风格"></a>调用返回风格</h3><p>◆主程序&#x2F;子程序:单线程控制，把问题划分为若干个处理步骤，构件即为主程序和子程序，子程序通常可合成为模块。过程调用作为交互机制，充当连接件的角色。个人认为netty符合这种模式 主程序处理连接 子程序处理请求<br>◆面向对象:构件是对象，对象是抽象数据类型的实例。连接件即使对象间交互的方式对象是通过函数和过程的调用来交互的，<br>◆层次结构:构件组成一个层次结构，连接件通过决定层间如何交互的协议来定义。每层为上一层提供服务，使用下一层的服务，只能见到与自己邻接的层。修改某一层，最多影响其相邻的两层(通常只能影响上层)<br>◆层次结构优点:支持基于可增加抽象层的设计，允许将一个复杂问题分解成一个增量步序列的实现。<br>  不同的层次处于不同的抽象级别，越靠近底层，抽象级别越高。<br>  由于每一层最多只影响两层，同时只要给相邻层提供相同的接口，允许每层用不同的方法实现，同样为软件复用提供了强大的支持。<br>◆缺点:<br>1.并不是每个系统都可以很容易的划分为分层的模式。<br>2.很难找到一个合适的、正确的层次抽象方法。</p><h3 id="独立构件风格"><a href="#独立构件风格" class="headerlink" title="独立构件风格"></a>独立构件风格</h3><p>进程通信<br>事件驱动系统 （隐式调用） （题目字眼 <span style="color:blue">事件</span>）</p><h3 id="仓库风格"><a href="#仓库风格" class="headerlink" title="仓库风格"></a>仓库风格</h3><p>优点：交互性好，可扩展性好（相比数据流风格此风格可扩展性更好）<br>缺点：</p><h3 id="虚拟机风格"><a href="#虚拟机风格" class="headerlink" title="虚拟机风格"></a>虚拟机风格</h3><p>解释器 （题目字眼 ，一般题目描述出现 <span style="color:blue">可视化 解释代码 可视化编程</span> 等都是这种风格）<br>基于规则的系统</p><h3 id="闭环"><a href="#闭环" class="headerlink" title="闭环"></a>闭环</h3><h3 id="C2风格"><a href="#C2风格" class="headerlink" title="C2风格"></a>C2风格</h3><p>工作模式:双机热备模式;双机互备模式;双机双工模式。 这几个区别是啥</p><p>这个问题的描述在各种应用环境下可能有不同的解释，但是这里我们主要从计算机网络和服务器集群的角度进行解析。一般而言，这些模式涉及到两台服务器如何进行协作以提供服务，主要区别在于它们如何共享负载以及处理故障。</p><ol><li><p>双机热备模式：在双机热备模式中，两台服务器中有一台作为主服务器（主节点）提供服务，另一台作为备份服务器（备份节点）处于热备份状态。也就是说备份服务器已经启动并准备好接管服务，但在正常情况下并不提供服务。一旦主服务器出现故障，备份服务器立即接管并提供服务，以此保持服务的连续性。这种模式的优点是可以在服务器故障时快速切换，缺点是备份服务器的资源在空闲状态下并未得到充分利用。</p></li><li><p>双机互备模式：在双机互备模式中，两台服务器都可以提供服务，也可以作为对方的备份。两台服务器在正常情况下都提供一部分服务，当一台服务器故障时，另一台服务器会接管故障服务器的服务。这种模式充分利用了服务器资源，即使一台服务器出现故障，也只会影响到一部分服务。</p></li><li><p>双机双工模式（双活模式）：在双机双工模式中，两台服务器均在运行状态，并共同承担服务负载。在正常情况下，服务请求会在两台服务器之间均衡分配。当一台服务器发生故障时，另一台服务器将接管所有的服务负载。这种模式的优点 是充分利用系统资源，并且提供了良好的服务容错能力。然而，这种模式需要复杂的负载均衡和故障切换机制。</p></li></ol><p>综上所述，三种模式主要的区别在于如何分配服务负载以及如何处理服务器故障。各种模式都有各自的优点和局限，选择哪种模式主要取决于应用的具体需求和环境。</p><h2 id="软件系统设计与建模"><a href="#软件系统设计与建模" class="headerlink" title="软件系统设计与建模"></a>软件系统设计与建模</h2><h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><p>数据流图在分层细化结构中遵循的数据平衡原则：<br>层间平衡：数据流个数一致，方向一致<br>图内平衡 : 对于数据流图的任意一个加工 , 既有输入 , 又有输出 ;<br>问题2<br>分析阶段：<br>数据流<br>数据字典<br>设计阶段：<br>数据流<br>数据字典</p>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
